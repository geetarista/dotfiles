!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
<C-G>S	vim/plugin/surround.vim	/^    imap        <C-G>S <Plug>ISurround$/;"	m
<C-G>s	vim/plugin/surround.vim	/^    imap        <C-G>s <Plug>Isurround$/;"	m
<C-S>	vim/plugin/surround.vim	/^        imap     <C-S> <Plug>Isurround$/;"	m
<C-X><CR>	vim/plugin/endwise.vim	/^    imap <C-X><CR> <CR><Plug>AlwaysEnd$/;"	m
<CR>	vim/plugin/endwise.vim	/^    imap <CR> <CR><Plug>DiscretionaryEnd$/;"	m
<Leader>rwp	vim/plugin/cecutil.vim	/^ map <unique> <Leader>rwp <Plug>RestoreWinPosn$/;"	m
<Leader>swp	vim/plugin/cecutil.vim	/^ map <unique> <Leader>swp <Plug>SaveWinPosn$/;"	m
<M-o>	vim/plugin/endwise.vim	/^    inoremap <M-o> <C-O>o$/;"	m
<Plug>AM_Htd	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Htd <SID>WS:'y,'zs%<[tT][rR]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><[tT][dD][^>]\\{-}>\\<Bar><\/[tT][dD]><\/[tT][rR]>%@&@%g<CR>'yjma'zk:AlignCtrl m=Ilp1P0 @<CR>:'a,.Align<CR>:'y,'zs\/ @\/@\/<CR>:'y,'zs\/@ <[tT][rR]>\/<[tT][rR]>\/ge<CR>:'y,'zs\/@\/\/ge<CR><SID>WE$/;"	m
<Plug>AM_T|	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T| <SID>WS:AlignCtrl mIp0P0=r <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T#	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T#   <SID>WS:AlignCtrl mIp0P0=r #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T,	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T,   <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T:	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T:   <SID>WS:AlignCtrl mIp1P1=r :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T;	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T;   <SID>WS:AlignCtrl mIp0P0=r ;<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T<	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T<   <SID>WS:AlignCtrl mIp0P0=r <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_T=	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T=   <SID>WS:'a,'z-1s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'z-1s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'z-1s\/; *\/;@\/e<CR>:'a,'z-1s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'z-1s\/!=\/\\x="!\\<Char-0x0f>"\/ge<CR>:AlignCtrl mIp1P1=r = @<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s\/; *@\/;\/e<CR>:'a,'z-1s\/; *$\/;\/e<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1s\/\\xff\/=\/ge<CR><SID>WE:exe "norm <Plug>acom"$/;"	m
<Plug>AM_T?	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T?   <SID>WS:AlignCtrl mIp0P0=r ?<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_T@	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T@   <SID>WS:AlignCtrl mIp0P0=r @<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_Tab	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tab  <SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\t','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_Ts,	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Ts,  <SID>WS:AlignCtrl mIp0P1=r ,<CR>:'a,.Align<CR>:'a,.s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_Tsp	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_Tsp  <SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=r @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_T~	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_T~   <SID>WS:AlignCtrl mIp0P0=r ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_a(	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a(       <SID>WS:AlignCtrl mIp0P1=l<CR>:'a,.Align [(,]<CR>:sil 'y+1,'z-1s\/\\(\\s\\+\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_a,		<SID>WS:'y,'zs/\(\S\)\s\+/\1	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a,		<SID>WS:'y,'zs\/\\(\\S\\)\\s\\+\/\\1 \/ge<CR>'yjma'zk:call AlignMaps#CharJoiner(",")<cr>:silent 'y,'zg\/,\/call AlignMaps#FixMultiDec()<CR>'z:exe "norm \\<Plug>AM_adec"<cr><SID>WE$/;"	m
<Plug>AM_a<		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a<		<SID>WS:AlignCtrl mIp1P1=l << >><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_a=		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a=		<SID>WS:AlignCtrl mIp1P1=l<CR>:AlignCtrl g :=<CR>:'a,'zAlign :\\==<CR><SID>WE$/;"	m
<Plug>AM_a?		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_a?		<SID>WS:AlignCtrl mIp1P1lC ? : : : : <CR>:'a,.Align<CR>:'a,'z-1s\/\\(\\s\\+\\)? \/?\\1\/e<CR><SID>WE$/;"	m
<Plug>AM_abox		<SID>WS:let	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_abox		<SID>WS:let g:alignmaps_iws=substitute(getline("'a"),'^\\(\\s*\\).*$','\\1','e')<CR>:'a,'z-1s\/^\\s\\+\/\/e<CR>:'a,'z-1s\/^.*$\/@&@\/<CR>:AlignCtrl m=p01P0w @<CR>:'a,.Align<CR>:'a,'z-1s\/@\/ * \/<CR>:'a,'z-1s\/@$\/*\/<CR>'aYP:s\/.\/*\/g<CR>0r\/'zkYp:s\/.\/*\/g<CR>0r A\/<Esc>:exe "'a-1,'z-1s\/^\/".g:alignmaps_iws."\/e"<CR><SID>WE$/;"	m
<Plug>AM_acom		<SID>WS:'a,.s/\/[*/]\/\=/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:'y,'zs/^\(	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_acom		<SID>WS:'a,.s\/\\\/[*\/]\\\/\\=\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:'y,'zs\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(2)<CR>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adcom	<SID>WS:'a,.v/^\s*\/[/*]/s/\/[*/]\*\=/@&@/e<CR>:'a,.v/^\s*\/[/*]/s/\*\//@&/e<CR>:'y,'zv/^\s*\/[/*]/s/^\(	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adcom	<SID>WS:'a,.v\/^\\s*\\\/[\/*]\/s\/\\\/[*\/]\\*\\=\/@&@\/e<CR>:'a,.v\/^\\s*\\\/[\/*]\/s\/\\*\\\/\/@&\/e<CR>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\( *\\) @\/\\1@\/e<CR>'zk:call AlignMaps#StdAlign(3)<cr>:'y,'zv\/^\\s*\\\/[\/*]\/s\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_adec		<SID>WS:'a,'zs/\([^	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adec		<SID>WS:'a,'zs\/\\([^ \\t\/(]\\)\\([*&]\\)\/\\1 \\2\/e<CR>:'y,'zv\/^\\\/\/s\/\\([^ \\t]\\)\\s\\+\/\\1 \/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\([^\/][*&]\\)\\s\\+\/\\1\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\(\\s*\\%(\\K\\k*\\s\\+\\%([a-zA-Z_*(&]\\)\\@=\\)\\+\\)\\([*(&]*\\)\\s*\\([a-zA-Z0-9_()]\\+\\)\\s*\\(\\(\\[.\\{-}]\\)*\\)\\s*\\(=\\)\\=\\s*\\(.\\{-}\\)\\=\\s*;\/\\1@\\2#@\\3\\4@\\6@\\7;@\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\*\\\/\\s*$\/@*\\\/\/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^\\s\\+\\*\/@@@@@* \/e<CR>:'y,'zv\/^\\s*[*\/]\/s\/^@@@@@\\*\\(.*[^*\/]\\)$\/&@*\/e<CR>'yjma'zk:AlignCtrl v ^\\s*[*\/#]<CR>:call AlignMaps#StdAlign(1)<cr>:'y,'zv\/^\\s*[*\/]\/s\/@ \/\/ge<CR>:'y,'zv\/^\\s*[*\/]\/s\/\\(\\s*\\);\/;\\1\/e<CR>:'y,'zv\/^#\/s\/# \/\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\([^\/*]\\)\\(\\*\\+\\)\\( \\+\\)\/\\1\\3\\2\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/\\((\\+\\)\\( \\+\\)\\*\/\\2\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/^\\(\\s\\+\\) \\*\/\\1*\/e<CR>:'y,'zv\/^\\s\\+[*\/#]\/s\/[ \\t@]*$\/\/e<CR>:'y,'zs\/^[*]\/ *\/e<CR><SID>WE$/;"	m
<Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_adef		<SID>WS:AlignPush<CR>:AlignCtrl v ^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/^\\(\\s*\\)#\\(\\s\\)*define\\s*\\(\\I[a-zA-Z_0-9(),]*\\)\\s*\\(.\\{-}\\)\\($\\<Bar>\\\/\\*\\)\/#\\1\\2define @\\3@\\4@\\5\/e<CR>:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/\\($\\<Bar>\\*\\\/\\)\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>'yjma'zk:'a,.v\/^\\s*\\(\\\/\\*\\<bar>\\\/\\\/\\)\/s\/ @\/\/g<CR><SID>WE$/;"	m
<Plug>AM_aenum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\([-+]\=\d\)/\1@\2/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aenum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\([-+]\\=\\d\\)\/\\1@\\2\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [,@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(,\\)\\(\\s\\+\\)\\([-0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_afnc		:<c-u>set	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_afnc		:<c-u>set lz<CR>:silent call AlignMaps#Afnc()<CR>:set nolz<CR>$/;"	m
<Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aocom	<SID>WS:AlignPush<CR>:AlignCtrl g \/[*\/]<CR>:exe "norm \\<Plug>AM_acom"<cr>:AlignPop<CR><SID>WE$/;"	m
<Plug>AM_ascom	<SID>WS:'a,.s/\/[*/]/@&@/e<CR>:'a,.s/\*\//@&/e<CR>:silent!	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ascom	<SID>WS:'a,.s\/\\\/[*\/]\/@&@\/e<CR>:'a,.s\/\\*\\\/\/@&\/e<CR>:silent! 'a,.g\/^\\s*@\\\/[*\/]\/s\/@\/\/ge<CR>:AlignCtrl v ^\\s*\\\/[*\/]<CR>:AlignCtrl g \\\/[*\/]<CR>'zk:call AlignMaps#StdAlign(2)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_aunum	<SID>WS:'a,'zs/\%([0-9.]\)\s\+\zs\([-+.]\=\d\)/@\1/ge<CR>:'a,'zs/\(\(^\|\s\)\d\+\)\(\s\+\)@/\1@\3@/ge<CR>:'a,'zs/\.@/\.0@/ge<CR>:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_aunum	<SID>WS:'a,'zs\/\\%([0-9.]\\)\\s\\+\\zs\\([-+.]\\=\\d\\)\/@\\1\/ge<CR>:'a,'zs\/\\(\\(^\\|\\s\\)\\d\\+\\)\\(\\s\\+\\)@\/\\1@\\3@\/ge<CR>:'a,'zs\/\\.@\/\\.0@\/ge<CR>:AlignCtrl wmp0P0r<CR>:'a,'zAlign [.@]<CR>:'a,'zs\/@\/ \/ge<CR>:'a,'zs\/\\(\\.\\)\\(\\s\\+\\)\\([0-9.,eE+]\\+\\)\/\\1\\3\\2\/ge<CR>:'a,'zs\/\\([eE]\\)\\(\\s\\+\\)\\([0-9+\\-+]\\+\\)\/\\1\\3\\2\/ge<CR><SID>WE$/;"	m
<Plug>AM_m=		<SID>WS:'a,'zs/\s\+\([*/+\-%<Bar>&\~^]\==\)/	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_m=		<SID>WS:'a,'zs\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zs@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zs\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zs\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mIp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1Align<CR>:'a,'z-1s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-s\/%\\ze[^=]\/ @%@ \/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1s\/\\xff\/=\/ge<CR>:'y,'zs\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AM_t|		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t|		<SID>WS:AlignCtrl mIp0P0=l <Bar><CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t#		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t#		<SID>WS:AlignCtrl mIp0P0=l #<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t,		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t:		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t;		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t;		<SID>WS:AlignCtrl mIp0P1=l ;<CR>:'a,.Align<CR>:sil 'y,'zs\/\\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_t<		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t<		<SID>WS:AlignCtrl mIp0P0=l <<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t=		<SID>WS:call	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t=		<SID>WS:call AlignMaps#Equals()<CR><SID>WE$/;"	m
<Plug>AM_t?		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t?		<SID>WS:AlignCtrl mIp0P0=l ?<CR>:'a,.Align<CR>:.,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_t@		<SID>WS::call	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t@		<SID>WS::call AlignMaps#StdAlign(1)<cr>:<SID>WE$/;"	m
<Plug>AM_tab		<SID>WS:'a,.s/^\(\t*\)\(.*\)$/\=submatch(1).escape(substitute(submatch(2),'\t',"\<Char-0x0f>",'g'),'\')/<CR>:if	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tab		<SID>WS:'a,.s\/^\\(\\t*\\)\\(.*\\)$\/\\=submatch(1).escape(substitute(submatch(2),'\\t',"\\<Char-0x0f>",'g'),'\\')\/<CR>:if &ts == 1<bar>exe "AlignCtrl mI=lp0P0 \\<Char-0x0f>"<bar>else<bar>exe "AlignCtrl mI=l \\<Char-0x0f>"<bar>endif<CR>:'a,.Align<CR>:exe "'y+1,'z-1s\/\\<Char-0x0f>\/".((&ts == 1)? '\\t' : ' ')."\/g"<CR><SID>WE$/;"	m
<Plug>AM_tml		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tml		<SID>WS:AlignCtrl mWp1P0=l \\\\\\@<!\\\\\\s*$<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l #<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)#\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts,		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts,		<SID>WS:AlignCtrl mIp0P1=l ,<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\),\/,\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts:		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts:		<SID>WS:AlignCtrl mIp1P1=l :<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\):\/:\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts;		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts;		<SID>WS:AlignCtrl mIp1P1=l ;<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts<		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts<		<SID>WS:AlignCtrl mIp1P1=l <<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)<\/<\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_ts=		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_ts=		<SID>WS:AlignCtrl mIp1P1=l =<CR>:'a,.Align<CR>:sil 'y+1,'z-1s\/\\(\\s*\\)=\/=\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_tsp		<SID>WS:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).escape(substitute(submatch(2),'\s\+','@','g'),'\')/<CR>:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsp		<SID>WS:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).escape(substitute(submatch(2),'\\s\\+','@','g'),'\\')\/<CR>:AlignCtrl mI=lp0P0 @<CR>:'a,.Align<CR>:'y+1,'z-1s\/@\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s/^\(\s*\)\(.*\)/\=submatch(1).substitute(submatch(2),'\s\+','@','g')/<CR>:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tsq		<SID>WS:'a,.AlignReplaceQuotedSpaces<CR>:'a,.s\/^\\(\\s*\\)\\(.*\\)\/\\=submatch(1).substitute(submatch(2),'\\s\\+','@','g')\/<CR>:AlignCtrl mIp0P0=l @<CR>:'a,.Align<CR>:'y+1,'z-1s\/[%@]\/ \/g<CR><SID>WE$/;"	m
<Plug>AM_tt		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_tt		<SID>WS:AlignCtrl mIp1P1=l \\\\\\@<!& \\\\\\\\<CR>:'a,.Align<CR><SID>WE$/;"	m
<Plug>AM_t~		<SID>WS:AlignCtrl	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_t~		<SID>WS:AlignCtrl mIp0P0=l ~<CR>:'a,.Align<CR>:'y,'zs\/ \\( *\\);\/;\\1\/ge<CR><SID>WE$/;"	m
<Plug>AM_w=		<SID>WS:'a,'zg/=/s/\s\+\([*/+\-%<Bar>&\~^]\==\)/	vim/plugin/AlignMapsPlugin.vim	/^map <silent> <script> <Plug>AM_w=		<SID>WS:'a,'zg\/=\/s\/\\s\\+\\([*\/+\\-%<Bar>&\\~^]\\==\\)\/ \\1\/e<CR>:'a,'zg\/=\/s@ \\+\\([*\/+\\-%<Bar>&\\~^]\\)=@\\1=@ge<CR>:'a,'zg\/=\/s\/==\/\\="\\<Char-0x0f>\\<Char-0x0f>"\/ge<CR>:'a,'zg\/=\/s\/!=\/\\="!\\<Char-0x0f>"\/ge<CR>'zk:AlignCtrl mWp1P1=l =<CR>:AlignCtrl g =<CR>:'a,'z-1g\/=\/Align<CR>:'a,'z-1g\/=\/s@\\([*\/+\\-%<Bar>&\\~^!=]\\)\\( \\+\\)=@\\2\\1=@ge<CR>:'a,'z-1g\/=\/s\/\\( \\+\\);\/;\\1\/ge<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\\/[*\/]\/@&@\/e<CR>:'a,'z-1v\/^\\s*\\\/[*\/]\/s\/\\*\\\/\/@&\/e<CR>'zk:call AlignMaps#StdAlign(1)<cr>:'y,'zs\/^\\(\\s*\\) @\/\\1\/e<CR>:'a,'z-1g\/=\/s\/\\xff\/=\/ge<CR>:'y,'zg\/=\/s\/ @\/\/eg<CR><SID>WE$/;"	m
<Plug>AlignMapsWrapperEnd	:call	vim/plugin/AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperEnd	:call AlignMaps#WrapperEnd()<CR>:set nolz<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:<c-u>set	vim/plugin/AlignMapsPlugin.vim	/^vmap <silent> <script> <Plug>AlignMapsWrapperStart	:<c-u>set lz<CR>:call AlignMaps#WrapperStart(1)<CR>$/;"	m
<Plug>AlignMapsWrapperStart	:set	vim/plugin/AlignMapsPlugin.vim	/^nmap <silent> <script> <Plug>AlignMapsWrapperStart	:set lz<CR>:call AlignMaps#WrapperStart(0)<CR>$/;"	m
<Plug>AlwaysEnd	vim/plugin/endwise.vim	/^    imap <script> <Plug>AlwaysEnd <SID>AlwaysEnd$/;"	m
<Plug>Csurround	vim/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>DiscretionaryEnd	vim/plugin/endwise.vim	/^    imap <script> <Plug>DiscretionaryEnd <SID>DiscretionaryEnd$/;"	m
<Plug>Dsurround	vim/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	vim/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	vim/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>RestoreWinPosn	:call	vim/plugin/cecutil.vim	/^nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>$/;"	m
<Plug>SaveWinPosn		:call	vim/plugin/cecutil.vim	/^nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>$/;"	m
<Plug>VSurround	vim/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc2(visualmode())<CR>$/;"	m
<Plug>Vsurround	vim/plugin/surround.vim	/^vnoremap <silent> <Plug>Vsurround  :<C-U>call <SID>opfunc(visualmode())<CR>$/;"	m
<Plug>YSsurround	vim/plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	vim/plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	vim/plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	vim/plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<SID>AlwaysEnd	vim/plugin/endwise.vim	/^    inoremap <silent> <SID>AlwaysEnd <C-R>=<SID>crend(1)<CR>$/;"	m
<SID>DiscretionaryEnd	vim/plugin/endwise.vim	/^    inoremap <silent> <SID>DiscretionaryEnd <C-R>=<SID>crend(0)<CR>$/;"	m
<SID>WE	<Plug>AlignMapsWrapperEnd	vim/plugin/AlignMapsPlugin.vim	/^ nmap <unique> <SID>WE	<Plug>AlignMapsWrapperEnd$/;"	m
<SID>WS	<Plug>AlignMapsWrapperStart	vim/plugin/AlignMapsPlugin.vim	/^ map <unique> <SID>WS	<Plug>AlignMapsWrapperStart$/;"	m
<SID>xx	vim/autoload/rails.vim	/^map <SID>xx <SID>xx$/;"	m
<SID>xx	vim/plugin/taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<c-r><tab>	vim/after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<d-cr>	vim/ftplugin/objc_cocoa_mappings.vim	/^nm <buffer> <silent> <d-cr> <d-r>$/;"	m
<f5>	vim/ftplugin/objc_cocoa_mappings.vim	/^ino <buffer> <silent> <f5> <c-x><c-o>$/;"	m
<tab>	vim/after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
AR	vim/ruby/command-t/Makefile	/^AR = ar$/;"	m
Abbrev	vim/autoload/rails.vim	/^function! s:Abbrev(bang,...) abort$/;"	f
Ack	vim/plugin/ack.vim	/^command! -nargs=* -complete=file Ack call Ack(<q-args>)$/;"	c
Ack	vim/plugin/ack.vim	/^function! Ack(args)$/;"	f
AckAdd	vim/plugin/ack.vim	/^command! -nargs=* -complete=file AckAdd call AckAdd(<q-args>)$/;"	c
AckAdd	vim/plugin/ack.vim	/^function! AckAdd(args)$/;"	f
Add	vim/syntax/cucumber.vim	/^function! s:Add(name)$/;"	f
AddBracketExpand	vim/autoload/rails.vim	/^function! s:AddBracketExpand(abbr,expn)$/;"	f
AddColonExpand	vim/autoload/rails.vim	/^function! s:AddColonExpand(abbr,expn)$/;"	f
AddParenExpand	vim/autoload/rails.vim	/^function! s:AddParenExpand(abbr,expn,...)$/;"	f
AddSelectiveExpand	vim/autoload/rails.vim	/^function! s:AddSelectiveExpand(abbr,pat,expn,...)$/;"	f
AddTabExpand	vim/autoload/rails.vim	/^function! s:AddTabExpand(abbr,expn)$/;"	f
Align	vim/plugin/AlignPlugin.vim	/^com! -bang -range -nargs=* Align <line1>,<line2>call Align#Align(<bang>0,<q-args>)$/;"	c
Align#Align	vim/autoload/Align.vim	/^fun! Align#Align(hasctrl,...) range$/;"	f
Align#AlignCtrl	vim/autoload/Align.vim	/^fun! Align#AlignCtrl(...)$/;"	f
Align#AlignPop	vim/autoload/Align.vim	/^fun! Align#AlignPop()$/;"	f
Align#AlignPush	vim/autoload/Align.vim	/^fun! Align#AlignPush()$/;"	f
Align#AlignReplaceQuotedSpaces	vim/autoload/Align.vim	/^fun! Align#AlignReplaceQuotedSpaces() $/;"	f
AlignCtrl	vim/plugin/AlignPlugin.vim	/^com!              -nargs=* AlignCtrl call Align#AlignCtrl(<q-args>)$/;"	c
AlignMaps#Afnc	vim/autoload/AlignMaps.vim	/^fun! AlignMaps#Afnc()$/;"	f
AlignMaps#CharJoiner	vim/autoload/AlignMaps.vim	/^fun! AlignMaps#CharJoiner(chr)$/;"	f
AlignMaps#Equals	vim/autoload/AlignMaps.vim	/^fun! AlignMaps#Equals() range$/;"	f
AlignMaps#FixMultiDec	vim/autoload/AlignMaps.vim	/^fun! AlignMaps#FixMultiDec()$/;"	f
AlignMaps#StdAlign	vim/autoload/AlignMaps.vim	/^fun! AlignMaps#StdAlign(mode) range$/;"	f
AlignMaps#WrapperEnd	vim/autoload/AlignMaps.vim	/^fun! AlignMaps#WrapperEnd() range$/;"	f
AlignMaps#WrapperStart	vim/autoload/AlignMaps.vim	/^fun! AlignMaps#WrapperStart(vis) range$/;"	f
AlignPop	vim/plugin/AlignPlugin.vim	/^com!              -nargs=0 AlignPop  call Align#AlignPop()$/;"	c
AlignPush	vim/plugin/AlignPlugin.vim	/^com!              -nargs=0 AlignPush call Align#AlignPush()$/;"	c
AlignReplaceQuotedSpaces	vim/plugin/AlignPlugin.vim	/^com!       -range -nargs=0 AlignReplaceQuotedSpaces <line1>,<line2>call Align#AlignReplaceQuotedSpaces()$/;"	c
AllKeysEqual	vim/autoload/objc/man.vim	/^fun AllKeysEqual(list, key, item)$/;"	f
Alternate	vim/autoload/rails.vim	/^function! s:Alternate(cmd,line1,line2,count,...)$/;"	f
Alternate	vim/ftplugin/objc_cocoa_mappings.vim	/^com! -buffer -nargs=? Alternate call <SID>AlternateFile()$/;"	c
AlternateFile	vim/ftplugin/objc_cocoa_mappings.vim	/^fun s:AlternateFile()$/;"	f
AutoCloseOff	vim/plugin/autoclose.vim	/^command! AutoCloseOff :let s:running = 0$/;"	c
AutoCloseOn	vim/plugin/autoclose.vim	/^command! AutoCloseOn :let s:running = 1$/;"	c
AutoCloseToggle	vim/plugin/autoclose.vim	/^command! AutoCloseToggle :call s:ToggleAutoClose()$/;"	c
AvoidOtherSigns	vim/autoload/RltvNmbr.vim	/^fun! s:AvoidOtherSigns()$/;"	f
AvoidOtherSigns	vim/plugin/RltvNmbr.vim	/^fun! s:AvoidOtherSigns()$/;"	f
BINDIR	vim/ruby/command-t/Makefile	/^BINDIR        = $(bindir)$/;"	m
Backspace	vim/plugin/autoclose.vim	/^function! s:Backspace()$/;"	f
Bookmark.AddBookmark	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.InvalidBookmarks	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.compareTo	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.setPath	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	vim/plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
BufAbbreviations	vim/autoload/rails.vim	/^function! s:BufAbbreviations()$/;"	f
BufCommands	vim/autoload/rails.vim	/^function! s:BufCommands()$/;"	f
BufDatabase	vim/autoload/rails.vim	/^function! s:BufDatabase(...)$/;"	f
BufFinderCommands	vim/autoload/rails.vim	/^function! s:BufFinderCommands()$/;"	f
BufInit	vim/plugin/rails.vim	/^function! s:BufInit(path)$/;"	f
BufInitStatusline	vim/autoload/rails.vim	/^function! s:BufInitStatusline()$/;"	f
BufMappings	vim/autoload/rails.vim	/^function! s:BufMappings()$/;"	f
BufModelines	vim/autoload/rails.vim	/^function! s:BufModelines()$/;"	f
BufNavCommands	vim/autoload/rails.vim	/^function! s:BufNavCommands()$/;"	f
BufScriptWrappers	vim/autoload/rails.vim	/^function! s:BufScriptWrappers()$/;"	f
BufSettings	vim/autoload/rails.vim	/^function! s:BufSettings()$/;"	f
BufSyntax	vim/autoload/rails.vim	/^function! s:BufSyntax()$/;"	f
BuildAnd	vim/ftplugin/objc_cocoa_mappings.vim	/^fun s:BuildAnd(command)$/;"	f
BuildMethods	vim/ftplugin/objc_cocoa_mappings.vim	/^com! -buffer -nargs=? -complete=customlist,objc#method_builder#Completion BuildMethods call objc#method_builder#Build('<args>')$/;"	c
BuildTabStops	vim/autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
CArgList	vim/after/ftplugin/c_snippets.vim	/^function! CArgList(count)$/;"	f
CC	vim/ruby/command-t/Makefile	/^CC = gcc$/;"	m
CFLAGS	vim/ruby/command-t/Makefile	/^CFLAGS   =  -fno-common -D_XOPEN_SOURCE=1  -fno-common -pipe -fno-common $(cflags) $/;"	m
CLEANFILES	vim/ruby/command-t/Makefile	/^CLEANFILES = mkmf.log$/;"	m
CLEANLIBS	vim/ruby/command-t/Makefile	/^CLEANLIBS     = $(TARGET).bundle $(TARGET).il? $(TARGET).tds $(TARGET).map$/;"	m
CLEANOBJS	vim/ruby/command-t/Makefile	/^CLEANOBJS     = *.o *.a *.s[ol] *.pdb *.exp *.bak$/;"	m
CMacroName	vim/after/ftplugin/c_snippets.vim	/^function! CMacroName(filename)$/;"	f
COPY	vim/ruby/command-t/Makefile	/^COPY = cp$/;"	m
CPPFLAGS	vim/ruby/command-t/Makefile	/^CPPFLAGS = -DHAVE_RUBY_H  -D_XOPEN_SOURCE -D_DARWIN_C_SOURCE $(DEFS) $(cppflags)$/;"	m
CXXFLAGS	vim/ruby/command-t/Makefile	/^CXXFLAGS = $(CFLAGS) $/;"	m
CapistranoCompletion	capistrano_completion	/^class CapistranoCompletion$/;"	c
ChangeVals	vim/plugin/snippetsEmu.vim	/^function! s:ChangeVals(changed)$/;"	f
CheckForInTag	vim/plugin/snippetsEmu.vim	/^function! s:CheckForInTag()$/;"	f
CheckPair	vim/plugin/autoclose.vim	/^function! s:CheckPair(char)$/;"	f
ChgDir	vim/autoload/vimball.vim	/^fun! s:ChgDir(newdir)$/;"	f
ChooseFrom	vim/autoload/objc/man.vim	/^fun s:ChooseFrom(references)$/;"	f
ChooseSnippet	vim/plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
ChopTags	vim/plugin/snippetsEmu.vim	/^function! s:ChopTags(text)$/;"	f
Close	vim/ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
ClosePair	vim/plugin/autoclose.vim	/^function! s:ClosePair(char)$/;"	f
CocoaDoc	vim/ftplugin/objc_cocoa_mappings.vim	/^com! -buffer -nargs=? -complete=custom,objc#man#Completion CocoaDoc call objc#man#ShowDoc('<args>')$/;"	c
ColorschemeLoaded	vim/autoload/RltvNmbr.vim	/^fun! s:ColorschemeLoaded()$/;"	f
ColorschemeLoaded	vim/plugin/RltvNmbr.vim	/^fun! s:ColorschemeLoaded()$/;"	f
CommandEdit	vim/autoload/rails.vim	/^function! s:CommandEdit(cmd,name,prefix,suffix,filter,default,...)$/;"	f
CommandList	vim/autoload/rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
CommandT	vim/plugin/command-t.vim	/^command -nargs=? -complete=dir CommandT call <SID>CommandTShow(<q-args>)$/;"	c
CommandT	vim/ruby/command-t/controller.rb	/^module CommandT$/;"	m
CommandT	vim/ruby/command-t/finder.rb	/^module CommandT$/;"	m
CommandT	vim/ruby/command-t/match_window.rb	/^module CommandT$/;"	m
CommandT	vim/ruby/command-t/prompt.rb	/^module CommandT$/;"	m
CommandT	vim/ruby/command-t/scanner.rb	/^module CommandT$/;"	m
CommandT	vim/ruby/command-t/settings.rb	/^module CommandT$/;"	m
CommandT	vim/ruby/command-t/stub.rb	/^module CommandT$/;"	m
CommandTAcceptSelection	vim/plugin/command-t.vim	/^function CommandTAcceptSelection()$/;"	f
CommandTAcceptSelectionSplit	vim/plugin/command-t.vim	/^function CommandTAcceptSelectionSplit()$/;"	f
CommandTAcceptSelectionTab	vim/plugin/command-t.vim	/^function CommandTAcceptSelectionTab()$/;"	f
CommandTAcceptSelectionVSplit	vim/plugin/command-t.vim	/^function CommandTAcceptSelectionVSplit()$/;"	f
CommandTBackspace	vim/plugin/command-t.vim	/^function CommandTBackspace()$/;"	f
CommandTCancel	vim/plugin/command-t.vim	/^function CommandTCancel()$/;"	f
CommandTClear	vim/plugin/command-t.vim	/^function CommandTClear()$/;"	f
CommandTCursorEnd	vim/plugin/command-t.vim	/^function CommandTCursorEnd()$/;"	f
CommandTCursorLeft	vim/plugin/command-t.vim	/^function CommandTCursorLeft()$/;"	f
CommandTCursorRight	vim/plugin/command-t.vim	/^function CommandTCursorRight()$/;"	f
CommandTCursorStart	vim/plugin/command-t.vim	/^function CommandTCursorStart()$/;"	f
CommandTDelete	vim/plugin/command-t.vim	/^function CommandTDelete()$/;"	f
CommandTFlush	vim/plugin/command-t.vim	/^command CommandTFlush call <SID>CommandTFlush()$/;"	c
CommandTFlush	vim/plugin/command-t.vim	/^function s:CommandTFlush()$/;"	f
CommandTHandleKey	vim/plugin/command-t.vim	/^function CommandTHandleKey(arg)$/;"	f
CommandTMatch_initialize	vim/ruby/command-t/match.c	/^VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self)$/;"	f
CommandTMatch_matches	vim/ruby/command-t/match.c	/^VALUE CommandTMatch_matches(VALUE self)$/;"	f
CommandTMatch_score	vim/ruby/command-t/match.c	/^VALUE CommandTMatch_score(VALUE self)$/;"	f
CommandTMatch_to_s	vim/ruby/command-t/match.c	/^VALUE CommandTMatch_to_s(VALUE self)$/;"	f
CommandTMatcher_initialize	vim/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self)$/;"	f
CommandTMatcher_matches_for	vim/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev)$/;"	f
CommandTMatcher_sorted_matchers_for	vim/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_sorted_matchers_for(VALUE self, VALUE abbrev, VALUE options)$/;"	f
CommandTRubyWarning	vim/plugin/command-t.vim	/^function s:CommandTRubyWarning()$/;"	f
CommandTSelectNext	vim/plugin/command-t.vim	/^function CommandTSelectNext()$/;"	f
CommandTSelectPrev	vim/plugin/command-t.vim	/^function CommandTSelectPrev()$/;"	f
CommandTShow	vim/plugin/command-t.vim	/^function s:CommandTShow(arg)$/;"	f
CommandTToggleFocus	vim/plugin/command-t.vim	/^function CommandTToggleFocus()$/;"	f
CommandT_option_from_hash	vim/ruby/command-t/ext.c	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash)$/;"	f
CompilerSet	vim/compiler/eruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim/compiler/ruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim/compiler/rubyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Complete	vim/autoload/objc/cocoacomplete.vim	/^fun s:Complete(base, items)$/;"	f
CompleteCocoa	vim/autoload/objc/cocoacomplete.vim	/^fun s:CompleteCocoa(word, file, ...)$/;"	f
CompleteFunction	vim/autoload/objc/cocoacomplete.vim	/^fun s:CompleteFunction(word)$/;"	f
CompleteMethod	vim/autoload/objc/cocoacomplete.vim	/^fun s:CompleteMethod(lnum, col, method)$/;"	f
Complete_cd	vim/autoload/rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_console	vim/autoload/rails.vim	/^function! s:Complete_console(A,L,P)$/;"	f
Complete_destroy	vim/autoload/rails.vim	/^function! s:Complete_destroy(A,L,P)$/;"	f
Complete_edit	vim/autoload/rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_environments	vim/autoload/rails.vim	/^function! s:Complete_environments(...)$/;"	f
Complete_find	vim/autoload/rails.vim	/^function! s:Complete_find(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_generate	vim/autoload/rails.vim	/^function! s:Complete_generate(A,L,P)$/;"	f
Complete_preview	vim/autoload/rails.vim	/^function! s:Complete_preview(A,L,P)$/;"	f
Complete_rake	vim/autoload/rails.vim	/^function! s:Complete_rake(A,L,P)$/;"	f
Complete_related	vim/autoload/rails.vim	/^function! s:Complete_related(A,L,P)$/;"	f
Complete_ruby	vim/autoload/rails.vim	/^function! s:Complete_ruby(A,L,P)$/;"	f
Complete_script	vim/autoload/rails.vim	/^function! s:Complete_script(ArgLead,CmdLine,P)$/;"	f
Complete_server	vim/autoload/rails.vim	/^function! s:Complete_server(A,L,P)$/;"	f
Complete_set	vim/autoload/rails.vim	/^function! s:Complete_set(A,L,P)$/;"	f
Controller	vim/ruby/command-t/controller.rb	/^  class Controller$/;"	c	class:CommandT
ConvertFunction	vim/autoload/objc/pum_snippet.vim	/^fun s:ConvertFunction(function)$/;"	f
ConvertMethod	vim/autoload/objc/pum_snippet.vim	/^fun s:ConvertMethod(method)$/;"	f
Count	vim/after/ftplugin/c_snippets.vim	/^function! Count(haystack, needle)$/;"	f
Count	vim/after/ftplugin/django_model_snippets.vim	/^function! Count(haystack, needle)$/;"	f
Count	vim/after/ftplugin/objc_snippets.vim	/^function! Count(haystack, needle)$/;"	f
Count	vim/after/ftplugin/python_snippets.vim	/^function! Count(haystack, needle)$/;"	f
Count	vim/autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
CreateBundleSnippet	vim/plugin/snippetsEmu.vim	/^command! -range CreateBundleSnippet <line1>,<line2>call s:CreateBundleSnippet()$/;"	c
CreateBundleSnippet	vim/plugin/snippetsEmu.vim	/^function! s:CreateBundleSnippet() range$/;"	f
CreateMenus	vim/plugin/rails.vim	/^function! s:CreateMenus() abort$/;"	f
CreateMethodList	vim/autoload/objc/method_list.vim	/^fun s:CreateMethodList()$/;"	f
CreateSnippet	vim/plugin/snippetsEmu.vim	/^command! -range CreateSnippet <line1>,<line2>call s:CreateSnippet()$/;"	c
CreateSnippet	vim/plugin/snippetsEmu.vim	/^function! s:CreateSnippet() range$/;"	f
CustomComplete	vim/autoload/rails.vim	/^function! s:CustomComplete(A,L,P,cmd)$/;"	f
D	vim/plugin/snippetsEmu.vim	/^fun! D(text)$/;"	f
DEFFILE	vim/ruby/command-t/Makefile	/^DEFFILE = $/;"	m
DEFS	vim/ruby/command-t/Makefile	/^DEFS     = $/;"	m
DISTCLEANFILES	vim/ruby/command-t/Makefile	/^DISTCLEANFILES = $/;"	m
DLDFLAGS	vim/ruby/command-t/Makefile	/^DLDFLAGS = $(ldflags) $(dldflags) $(archflag)$/;"	m
DLLIB	vim/ruby/command-t/Makefile	/^DLLIB = $(TARGET).bundle$/;"	m
DM	vim/plugin/cecutil.vim	/^com! -bar -nargs=1 DM	call DestroyMark(<q-args>)$/;"	c
Debug	vim/plugin/snippetsEmu.vim	/^function! s:Debug(func, text)$/;"	f
DefRuby	vim/autoload/rubycomplete.vim	/^function! s:DefRuby()$/;"	f
DefineSnips	vim/plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
DelIabbr	vim/plugin/snippetsEmu.vim	/^      \\ DelIabbr call <SID>DelSnippet(<q-args>, "g:")$/;"	c
DelSnippet	vim/plugin/snippetsEmu.vim	/^      \\ DelSnippet call <SID>DelSnippet(<q-args>, "b:")$/;"	c
DelSnippet	vim/plugin/snippetsEmu.vim	/^function! s:DelSnippet(snippet, scope)$/;"	f
DeleteEmptyTag	vim/plugin/snippetsEmu.vim	/^function! s:DeleteEmptyTag()$/;"	f
DestroyMark	vim/plugin/cecutil.vim	/^fun! DestroyMark(markname)$/;"	f
Detect	vim/plugin/rails.vim	/^function! s:Detect(filename)$/;"	f
DjangoArgList	vim/after/ftplugin/django_model_snippets.vim	/^function! DjangoArgList(count)$/;"	f
Doc	vim/autoload/rails.vim	/^function! s:Doc(bang, string)$/;"	f
EXEEXT	vim/ruby/command-t/Makefile	/^EXEEXT = $/;"	m
EXTSTATIC	vim/ruby/command-t/Makefile	/^EXTSTATIC = $/;"	m
Edit	vim/autoload/rails.vim	/^function! s:Edit(count,cmd,...)$/;"	f
EditSimpleRb	vim/autoload/rails.vim	/^function! s:EditSimpleRb(cmd,name,target,prefix,suffix,...)$/;"	f
ErrMsg	vim/autoload/rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
Error	vim/autoload/objc/method_builder.vim	/^fun s:Error(msg)$/;"	f
Escape	vim/autoload/vimball.vim	/^fun s:Escape(name)$/;"	f
Extract	vim/autoload/rails.vim	/^function! s:Extract(bang,...) range abort$/;"	f
ExtractSnips	vim/plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	vim/plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
FileLimitExceeded	vim/ruby/command-t/scanner.rb	/^    class FileLimitExceeded < ::RuntimeError; end$/;"	c	class:CommandT.Scanner
Filename	vim/autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
Find	vim/autoload/rails.vim	/^function! s:Find(count,cmd,...)$/;"	f
Finder	vim/ruby/command-t/finder.rb	/^  class Finder$/;"	c	class:CommandT
FufGlobal	vim/autoload/fuf.vim	/^augroup FufGlobal$/;"	a
GetAllMatches	vim/autoload/objc/method_list.vim	/^fun s:GetAllMatches(needle)$/;"	f
GetBufferRubyClass	vim/autoload/rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
GetBufferRubyEntity	vim/autoload/rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
GetBufferRubyModule	vim/autoload/rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
GetBufferRubySingletonMethods	vim/autoload/rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
GetCocoaClass	vim/autoload/objc/cocoacomplete.vim	/^fun s:GetCocoaClass(lnum, col)$/;"	f
GetCompleteType	vim/autoload/objc/cocoacomplete.vim	/^fun s:GetCompleteType(lnum, col)$/;"	f
GetCucumberIndent	vim/indent/cucumber.vim	/^function! GetCucumberIndent()$/;"	f
GetCurrentSyntaxRegion	vim/plugin/autoclose.vim	/^function! s:GetCurrentSyntaxRegion()$/;"	f
GetCurrentSyntaxRegionIf	vim/plugin/autoclose.vim	/^function! s:GetCurrentSyntaxRegionIf(char)$/;"	f
GetDeclWord	vim/autoload/objc/cocoacomplete.vim	/^fun s:GetDeclWord(var)$/;"	f
GetDeclarations	vim/autoload/objc/method_builder.vim	/^fun s:GetDeclarations(file)$/;"	f
GetErubyIndent	vim/indent/eruby.vim	/^function! GetErubyIndent()$/;"	f
GetJsIndent	vim/indent/javascript.vim	/^function! GetJsIndent()$/;"	f
GetLatestVimScripts	vim/autoload/getscript.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetLatestVimScripts	vim/plugin/getscriptPlugin.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetMSL	vim/indent/ruby.vim	/^function s:GetMSL(lnum)$/;"	f
GetMethodName	vim/autoload/objc/cocoacomplete.vim	/^fun s:GetMethodName(lnum, col, base)$/;"	f
GetMethodName	vim/autoload/objc/man.vim	/^fun s:GetMethodName()$/;"	f
GetNextChar	vim/plugin/autoclose.vim	/^function! s:GetNextChar()$/;"	f
GetObjPos	vim/autoload/objc/cocoacomplete.vim	/^fun s:GetObjPos(lnum, col)$/;"	f
GetOneScript	vim/autoload/getscript.vim	/^fun! s:GetOneScript(...)$/;"	f
GetPrevChar	vim/plugin/autoclose.vim	/^function! s:GetPrevChar()$/;"	f
GetRubyIndent	vim/indent/ruby.vim	/^function GetRubyIndent()$/;"	f
GetRubyVarType	vim/autoload/rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
GetScript	vim/autoload/getscript.vim	/^com!        -nargs=0 GetScript           call getscript#GetLatestVimScripts()$/;"	c
GetScripts	vim/plugin/getscriptPlugin.vim	/^com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()$/;"	c
GetSnippet	vim/plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	vim/plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetSuperTabSNR	vim/plugin/snippetsEmu.vim	/^function! s:GetSuperTabSNR()$/;"	f
Gist	vim/plugin/gist.vim	/^command! -nargs=? -range=% Gist :call Gist(<line1>, <line2>, <f-args>)$/;"	c
Gist	vim/plugin/gist.vim	/^function! Gist(line1, line2, ...)$/;"	f
GistDelete	vim/plugin/gist.vim	/^function! s:GistDelete(user, token, gistid)$/;"	f
GistDetectFiletype	vim/plugin/gist.vim	/^function! s:GistDetectFiletype(gistid)$/;"	f
GistGet	vim/plugin/gist.vim	/^function! s:GistGet(user, token, gistid, clipboard)$/;"	f
GistGetFileName	vim/plugin/gist.vim	/^function! s:GistGetFileName(gistid)$/;"	f
GistGetSessionID	vim/plugin/gist.vim	/^function! s:GistGetSessionID(user, password)$/;"	f
GistList	vim/plugin/gist.vim	/^function! s:GistList(user, token, gistls)$/;"	f
GistListAction	vim/plugin/gist.vim	/^function! s:GistListAction()$/;"	f
GistPost	vim/plugin/gist.vim	/^function! s:GistPost(user, token, content, private)$/;"	f
GistPostBuffers	vim/plugin/gist.vim	/^function! s:GistPostBuffers(user, token, private)$/;"	f
GistUpdate	vim/plugin/gist.vim	/^function! s:GistUpdate(user, token, content, gistid, gistnm)$/;"	f
GistWrite	vim/plugin/gist.vim	/^function! s:GistWrite(fname)$/;"	f
GoWinbufnr	vim/plugin/cecutil.vim	/^fun! GoWinbufnr(bufnum)$/;"	f
Hash	vim/plugin/snippetsEmu.vim	/^function! s:Hash(text)$/;"	f
HiDefaults	vim/autoload/rails.vim	/^function! s:HiDefaults()$/;"	f
HiLink	vim/syntax/eruby.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	vim/syntax/eruby.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	vim/syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	vim/syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	vim/syntax/json.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	vim/syntax/json.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	vim/syntax/textile.vim	/^        command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	vim/syntax/textile.vim	/^        command -nargs=+ HiLink hi link <args>$/;"	c
HtmlHiLink	vim/syntax/rdoc.vim	/^  command! -nargs=+ HtmlHiLink highlight def link <args>$/;"	c
HtmlHiLink	vim/syntax/rdoc.vim	/^  command! -nargs=+ HtmlHiLink highlight link <args>$/;"	c
INCFLAGS	vim/ruby/command-t/Makefile	/^INCFLAGS = -I. -I$(topdir) -I$(hdrdir) -I$(srcdir)$/;"	m
INSTALL	vim/ruby/command-t/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	vim/ruby/command-t/Makefile	/^INSTALL_DATA = $(INSTALL) -m 644$/;"	m
INSTALL_PROG	vim/ruby/command-t/Makefile	/^INSTALL_PROG = $(INSTALL) -m 0755$/;"	m
Iabbr	vim/plugin/snippetsEmu.vim	/^         \\ Iabbr call <SID>SetCom(<q-args>, "g:")$/;"	c
InComment	vim/autoload/objc/method_list.vim	/^fun s:InComment(line, col)$/;"	f
InitStatusline	vim/autoload/rails.vim	/^function! s:InitStatusline()$/;"	f
Init_ext	vim/ruby/command-t/ext.c	/^void Init_ext()$/;"	f
InjectIntoStatusline	vim/autoload/rails.vim	/^function! s:InjectIntoStatusline(status)$/;"	f
InsertPair	vim/plugin/autoclose.vim	/^function! s:InsertPair(char)$/;"	f
Invert	vim/autoload/rails.vim	/^function! s:Invert(bang)$/;"	f
IsEmptyPair	vim/plugin/autoclose.vim	/^function! s:IsEmptyPair()$/;"	f
IsForbidden	vim/plugin/autoclose.vim	/^function! s:IsForbidden(char)$/;"	f
IsInClassDef	vim/autoload/rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
IsInString	vim/indent/ruby.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInStringOrComment	vim/indent/ruby.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInStringOrDocumentation	vim/indent/ruby.vim	/^function s:IsInStringOrDocumentation(lnum, col)$/;"	f
IsPosInClassDef	vim/autoload/rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
IterVar	vim/after/ftplugin/ruby.vim	/^function! IterVar(collection)$/;"	f
JavaTestFileName	vim/after/ftplugin/java_snippets.vim	/^function! JavaTestFileName(type)$/;"	f
Jumper	vim/plugin/snippetsEmu.vim	/^function! <SID>Jumper()$/;"	f
Kernel	irbrc	/^module Kernel$/;"	m
LAck	vim/plugin/ack.vim	/^command! -nargs=* -complete=file LAck call LAck(<q-args>)$/;"	c
LAck	vim/plugin/ack.vim	/^function! LAck(args)$/;"	f
LAckAdd	vim/plugin/ack.vim	/^command! -nargs=* -complete=file LAckAdd call LAckAdd(<q-args>)$/;"	c
LAckAdd	vim/plugin/ack.vim	/^function! LAckAdd(args)$/;"	f
LDSHARED	vim/ruby/command-t/Makefile	/^LDSHARED = cc -dynamic -bundle -undefined suppress -flat_namespace$/;"	m
LIBPATH	vim/ruby/command-t/Makefile	/^LIBPATH =  -L. -L$(libdir)$/;"	m
LIBRUBY	vim/ruby/command-t/Makefile	/^LIBRUBY = $(LIBRUBY_SO)$/;"	m
LIBRUBYARG_SHARED	vim/ruby/command-t/Makefile	/^LIBRUBYARG_SHARED = -l$(RUBY_SO_NAME)$/;"	m
LIBRUBYARG_STATIC	vim/ruby/command-t/Makefile	/^LIBRUBYARG_STATIC = -l$(RUBY_SO_NAME)-static$/;"	m
LIBRUBY_A	vim/ruby/command-t/Makefile	/^LIBRUBY_A = lib$(RUBY_SO_NAME)-static.a$/;"	m
LIBS	vim/ruby/command-t/Makefile	/^LIBS = $(LIBRUBYARG_SHARED)  -lpthread -ldl -lobjc  $/;"	m
LOCAL_LIBS	vim/ruby/command-t/Makefile	/^LOCAL_LIBS = $/;"	m
LeaveMethodList	vim/autoload/objc/method_list.vim	/^fun s:LeaveMethodList()$/;"	f
LineHasOpeningBrackets	vim/indent/ruby.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
ListBufferSnippets	vim/plugin/snippetsEmu.vim	/^function! s:ListBufferSnippets(ArgLead, CmdLine, CursorPos)$/;"	f
ListGlobalSnippets	vim/plugin/snippetsEmu.vim	/^function! s:ListGlobalSnippets(ArgLead, CmdLine, CursorPos)$/;"	f
ListMethods	vim/ftplugin/objc_cocoa_mappings.vim	/^com! -buffer ListMethods call objc#method_list#Activate(1)$/;"	c
ListSnippets	vim/plugin/snippetsEmu.vim	/^function! s:ListSnippets(ArgLead, CmdLine, CursorPos, scope)$/;"	f
LocalModelines	vim/autoload/rails.vim	/^function! s:LocalModelines(lnum)$/;"	f
Log	vim/autoload/rails.vim	/^function! s:Log(bang,arg)$/;"	f
MAKEDIRS	vim/ruby/command-t/Makefile	/^MAKEDIRS = mkdir -p$/;"	m
MakeChanges	vim/plugin/snippetsEmu.vim	/^function! s:MakeChanges()$/;"	f
MakeSnip	vim/plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
MakeSpace	vim/autoload/Align.vim	/^fun! s:MakeSpace(spacecnt)$/;"	f
Match	vim/indent/ruby.vim	/^function s:Match(lnum, regex)$/;"	f
MatchAll	vim/autoload/objc/man.vim	/^fun s:MatchAll(haystack, needle)$/;"	f
MatchLast	vim/indent/ruby.vim	/^function s:MatchLast(lnum, regex)$/;"	f
MatchWindow	vim/ruby/command-t/match_window.rb	/^  class MatchWindow$/;"	c	class:CommandT
MkVimball	vim/plugin/vimballPlugin.vim	/^com! -ra   -complete=file -na=+ -bang MkVimball call vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)$/;"	c
Module	irbrc	/^class Module$/;"	c
NERDTree	vim/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	vim/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeClose	vim/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeFromBookmark	vim/plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeGetCurrentNode	vim/plugin/NERD_tree.vim	/^function! NERDTreeGetCurrentNode()$/;"	f
NERDTreeGetCurrentPath	vim/plugin/NERD_tree.vim	/^function! NERDTreeGetCurrentPath()$/;"	f
NERDTreeHijackNetrw	vim/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	vim/plugin/NERD_tree.vim	/^command! -n=0 -complete=customlist,s:completeNERDTreeMirrors -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeToggle	vim/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
Navcommand	vim/autoload/rails.vim	/^function! s:Navcommand(bang,...)$/;"	f
NewProject	vim/autoload/rails.vim	/^function! s:NewProject(proj,rr)$/;"	f
NewProjectTemplate	vim/autoload/rails.vim	/^function! s:NewProjectTemplate(proj,rr)$/;"	f
NextHop	vim/plugin/snippetsEmu.vim	/^function! <SID>NextHop()$/;"	f
OBJS	vim/ruby/command-t/Makefile	/^OBJS = ext.o match.o matcher.o$/;"	m
ObjCArgList	vim/after/ftplugin/objc_snippets.vim	/^function! ObjCArgList(count)$/;"	f
Object	irbrc	/^class Object$/;"	c
OpenFile	vim/autoload/objc/man.vim	/^fun s:OpenFile(file)$/;"	f
OrderSnippet	vim/autoload/objc/pum_snippet.vim	/^fun s:OrderSnippet(snippet)$/;"	f
Path	vim/autoload/vimball.vim	/^fun! s:Path(cmd,quote)$/;"	f
Path.AbsolutePathFor	vim/plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	vim/plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	vim/plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	vim/plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	vim/plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.WinToUnixPath	vim/plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path.bookmarkNames	vim/plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	vim/plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	vim/plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	vim/plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	vim/plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	vim/plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	vim/plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.equals	vim/plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	vim/plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	vim/plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	vim/plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	vim/plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	vim/plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getPathTrunk	vim/plugin/NERD_tree.vim	/^function! s:Path.getPathTrunk()$/;"	f
Path.getSortOrderIndex	vim/plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	vim/plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.readInfoFromDisk	vim/plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	vim/plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	vim/plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	vim/plugin/NERD_tree.vim	/^function! s:Path.str(esc)$/;"	f
Path.strAbs	vim/plugin/NERD_tree.vim	/^function! s:Path.strAbs()$/;"	f
Path.strDisplay	vim/plugin/NERD_tree.vim	/^function! s:Path.strDisplay()$/;"	f
Path.strForCd	vim/plugin/NERD_tree.vim	/^function! s:Path.strForCd()$/;"	f
Path.strForEditCmd	vim/plugin/NERD_tree.vim	/^function! s:Path.strForEditCmd()$/;"	f
Path.strForGlob	vim/plugin/NERD_tree.vim	/^function! s:Path.strForGlob()$/;"	f
Path.strForOS	vim/plugin/NERD_tree.vim	/^function! s:Path.strForOS(esc)$/;"	f
Path.strTrunk	vim/plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PrevNonBlankNonString	vim/indent/ruby.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
Preview	vim/autoload/rails.vim	/^function! s:Preview(bang,lnum,arg)$/;"	f
ProcessFile	vim/plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessSnippet	vim/autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
Project	vim/autoload/rails.vim	/^function! s:Project(bang,arg)$/;"	f
ProjectMenu	vim/plugin/rails.vim	/^function! s:ProjectMenu()$/;"	f
Prompt	vim/ruby/command-t/prompt.rb	/^  class Prompt$/;"	c	class:CommandT
PyCleanupArgs	vim/after/ftplugin/python_snippets.vim	/^function! PyCleanupArgs(text)$/;"	f
PyGetDocstringFromArgs	vim/after/ftplugin/python_snippets.vim	/^function! PyGetDocstringFromArgs(text)$/;"	f
PyGetIndentString	vim/after/ftplugin/python_snippets.vim	/^function! PyGetIndentString()$/;"	f
PyGetVariableInitializationFromVars	vim/after/ftplugin/python_snippets.vim	/^function! PyGetVariableInitializationFromVars(text)$/;"	f
PyGetVarnamesFromArgs	vim/after/ftplugin/python_snippets.vim	/^function! PyGetVarnamesFromArgs(text)$/;"	f
PyHashArgList	vim/after/ftplugin/python_snippets.vim	/^function! PyHashArgList(count)$/;"	f
PyReplace	vim/after/ftplugin/python_snippets.vim	/^function! PyReplace(subject, match, replacement)$/;"	f
PyStripDefaultValue	vim/after/ftplugin/python_snippets.vim	/^function! PyStripDefaultValue(text)$/;"	f
QArgSplitter	vim/autoload/Align.vim	/^fun! s:QArgSplitter(qarg)$/;"	f
QArgSplitter	vim/plugin/cecutil.vim	/^fun! QArgSplitter(qarg)$/;"	f
RARRAY_LEN	vim/ruby/command-t/ruby_compat.h	/^#define RARRAY_LEN(/;"	d
RARRAY_PTR	vim/ruby/command-t/ruby_compat.h	/^#define RARRAY_PTR(/;"	d
RFLOAT_VALUE	vim/ruby/command-t/ruby_compat.h	/^#define RFLOAT_VALUE(/;"	d
RM	vim/plugin/cecutil.vim	/^com! -bar -nargs=1 RM	call RestoreMark(<q-args>)$/;"	c
RM	vim/ruby/command-t/Makefile	/^RM = rm -f$/;"	m
RSTRING_LEN	vim/ruby/command-t/ruby_compat.h	/^#define RSTRING_LEN(/;"	d
RSTRING_PTR	vim/ruby/command-t/ruby_compat.h	/^#define RSTRING_PTR(/;"	d
RUBY	vim/ruby/command-t/Makefile	/^RUBY = $(ruby)$/;"	m
RUBYARCHDIR	vim/ruby/command-t/Makefile	/^RUBYARCHDIR   = $(sitearchdir)$(target_prefix)$/;"	m
RUBYCOMMONDIR	vim/ruby/command-t/Makefile	/^RUBYCOMMONDIR = $(sitedir)$(target_prefix)$/;"	m
RUBYLIBDIR	vim/ruby/command-t/Makefile	/^RUBYLIBDIR    = $(sitelibdir)$(target_prefix)$/;"	m
RUBY_EXTCONF_H	vim/ruby/command-t/Makefile	/^RUBY_EXTCONF_H = $/;"	m
RUBY_INSTALL_NAME	vim/ruby/command-t/Makefile	/^RUBY_INSTALL_NAME = ruby$/;"	m
RUBY_SO_NAME	vim/ruby/command-t/Makefile	/^RUBY_SO_NAME = ruby$/;"	m
RWP	vim/plugin/cecutil.vim	/^com! -bar -nargs=0 RWP	call RestoreWinPosn()$/;"	c
Rails	vim/plugin/rails.vim	/^command! -bar -bang -nargs=* -complete=dir Rails :if s:autoload()|call rails#new_app_command(<bang>0,<f-args>)|endif$/;"	c
RailsBufInit	vim/autoload/rails.vim	/^function! RailsBufInit(path)$/;"	f
RailsFile	vim/autoload/rails.vim	/^function! RailsFile()$/;"	f
RailsFilePath	vim/autoload/rails.vim	/^function! RailsFilePath()$/;"	f
RailsFileType	vim/autoload/rails.vim	/^function! RailsFileType()$/;"	f
RailsFind	vim/autoload/rails.vim	/^function! s:RailsFind()$/;"	f
RailsHelpCommand	vim/autoload/rails.vim	/^function! RailsHelpCommand(...)$/;"	f
RailsIncludeexpr	vim/autoload/rails.vim	/^function! RailsIncludeexpr()$/;"	f
RailsIncludefind	vim/autoload/rails.vim	/^function! s:RailsIncludefind(str,...)$/;"	f
RailsNamedRoutes	vim/autoload/rails.vim	/^function! RailsNamedRoutes()$/;"	f
RailsRevision	vim/autoload/rails.vim	/^function! RailsRevision()$/;"	f
RailsRoot	vim/autoload/rails.vim	/^function! RailsRoot()$/;"	f
Rake	vim/autoload/rails.vim	/^function! s:Rake(bang,lnum,arg)$/;"	f
ReadableExtensionIn	vim/ftplugin/objc_cocoa_mappings.vim	/^fun s:ReadableExtensionIn(path, extensions)$/;"	f
RecordInFile	vim/autoload/vimball.vim	/^fun! s:RecordInFile(home)$/;"	f
RecordInVar	vim/autoload/vimball.vim	/^fun! s:RecordInVar(home,cmd)$/;"	f
Refresh	vim/autoload/rails.vim	/^function! s:Refresh(bang)$/;"	f
RefreshBuffer	vim/autoload/rails.vim	/^function! s:RefreshBuffer()$/;"	f
Related	vim/autoload/rails.vim	/^function! s:Related(cmd,line1,line2,count,...)$/;"	f
RemoveAndStoreCommands	vim/plugin/snippetsEmu.vim	/^function! s:RemoveAndStoreCommands(text)$/;"	f
RemoveSnippet	vim/autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
ResetOptions	vim/autoload/objc/pum_snippet.vim	/^fun s:ResetOptions()$/;"	f
ResetSnippets	vim/plugin/snipMate.vim	/^fun! ResetSnippets()$/;"	f
RestoreMark	vim/plugin/cecutil.vim	/^fun! RestoreMark(markname)$/;"	f
RestoreSearch	vim/plugin/snippetsEmu.vim	/^function! s:RestoreSearch()$/;"	f
RestoreUserMaps	vim/plugin/cecutil.vim	/^fun! RestoreUserMaps(suffix)$/;"	f
RestoreVE	vim/plugin/autoclose.vim	/^function! s:RestoreVE()$/;"	f
RestoreWinPosn	vim/plugin/cecutil.vim	/^fun! RestoreWinPosn(...)$/;"	f
ReturnKey	vim/plugin/snippetsEmu.vim	/^function! s:ReturnKey()$/;"	f
RltvNmbr	vim/autoload/RltvNmbr.vim	/^fun! s:RltvNmbr(mode,...)$/;"	f
RltvNmbr	vim/plugin/RltvNmbr.vim	/^fun! s:RltvNmbr(mode,...)$/;"	f
RltvNmbr	vim/plugin/RltvNmbrPlugin.vim	/^com! -bang				RltvNmbr	call RltvNmbr#RltvNmbrCtrl(<bang>1)$/;"	c
RltvNmbr#RltvNmbrCtrl	vim/autoload/RltvNmbr.vim	/^fun! RltvNmbr#RltvNmbrCtrl(start)$/;"	f
RltvNmbr#RltvNmbrCtrl	vim/plugin/RltvNmbr.vim	/^fun! RltvNmbr#RltvNmbrCtrl(start)$/;"	f
RltvNmbr#RltvNmbrToggle	vim/autoload/RltvNmbr.vim	/^fun! RltvNmbr#RltvNmbrToggle()$/;"	f
RltvNmbr#RltvNmbrToggle	vim/plugin/RltvNmbr.vim	/^fun! RltvNmbr#RltvNmbrToggle()$/;"	f
RmVimball	vim/plugin/vimballPlugin.vim	/^com! -na=* -complete=dir  RmVimball   call vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()$/;"	c
RubyBalloonexpr	vim/ftplugin/ruby.vim	/^function! RubyBalloonexpr()$/;"	f
RunCommand	vim/plugin/snippetsEmu.vim	/^function! s:RunCommand(command, z)$/;"	f
S	vim/plugin/surround.vim	/^            vmap  S    <Plug>VSurround$/;"	m
SHELL	vim/ruby/command-t/Makefile	/^SHELL = \/bin\/sh$/;"	m
SID	vim/plugin/snippetsEmu.vim	/^function! s:SID()$/;"	f
SM	vim/plugin/cecutil.vim	/^com! -bar -nargs=1 SM	call SaveMark(<q-args>)$/;"	c
SRCS	vim/ruby/command-t/Makefile	/^SRCS = ext.c match.c matcher.c$/;"	m
STATIC_LIB	vim/ruby/command-t/Makefile	/^STATIC_LIB = $/;"	m
SWP	vim/plugin/cecutil.vim	/^com! -bar -nargs=0 SWP	call SaveWinPosn()$/;"	c
SaveMark	vim/plugin/cecutil.vim	/^fun! SaveMark(markname)$/;"	f
SaveUserMaps	vim/plugin/cecutil.vim	/^fun! SaveUserMaps(mapmode,maplead,mapchx,suffix)$/;"	f
SaveWinPosn	vim/plugin/cecutil.vim	/^fun! SaveWinPosn(...)$/;"	f
Scanner	vim/ruby/command-t/scanner.rb	/^  class Scanner$/;"	c	class:CommandT
Screen	vim/ruby/vim/screen.rb	/^  module Screen$/;"	m	class:VIM
SearchList	vim/autoload/objc/cocoacomplete.vim	/^fun s:SearchList(list, regex)$/;"	f
SelectDoctype	vim/after/ftplugin/html_snippets.vim	/^function! SelectDoctype()$/;"	f
SelectMethod	vim/autoload/objc/method_list.vim	/^fun s:SelectMethod()$/;"	f
SelectWord	vim/autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
Set	vim/autoload/rails.vim	/^function! s:Set(bang,...)$/;"	f
SetBasePath	vim/autoload/rails.vim	/^function! s:SetBasePath()$/;"	f
SetCom	vim/plugin/snippetsEmu.vim	/^function! <SID>SetCom(text, scope)$/;"	f
SetLocalTagVars	vim/plugin/snippetsEmu.vim	/^function! s:SetLocalTagVars()$/;"	f
SetOptDefault	vim/plugin/rails.vim	/^function! s:SetOptDefault(opt,val)$/;"	f
SetSearchStrings	vim/plugin/snippetsEmu.vim	/^function! s:SetSearchStrings()$/;"	f
SetUpTags	vim/plugin/snippetsEmu.vim	/^function! s:SetUpTags()$/;"	f
SetVEAll	vim/plugin/autoclose.vim	/^function! s:SetVEAll()$/;"	f
Settings	vim/ruby/command-t/settings.rb	/^  class Settings$/;"	c	class:CommandT
SetupSupertab	vim/plugin/snippetsEmu.vim	/^function! s:SetupSupertab()$/;"	f
ShowAvailableSnips	vim/plugin/snipMate.vim	/^fun ShowAvailableSnips()$/;"	f
SnipMapKeys	vim/plugin/snippetsEmu.vim	/^function! s:SnipMapKeys()$/;"	f
Snippet	vim/plugin/snippetsEmu.vim	/^         \\ Snippet call <SID>SetCom(<q-args>, "b:")$/;"	c
SortByLineNum	vim/autoload/objc/method_list.vim	/^fun s:SortByLineNum(i1, i2)$/;"	f
SpecDescribed	vim/after/ftplugin/ruby.vim	/^function! SpecDescribed()$/;"	f
SpecSubject	vim/after/ftplugin/ruby.vim	/^function! SpecSubject()$/;"	f
StrLen	vim/plugin/snippetsEmu.vim	/^function! s:StrLen(str)$/;"	f
Strlen	vim/autoload/Align.vim	/^fun! s:Strlen(x)$/;"	f
Stub	vim/ruby/command-t/stub.rb	/^  class Stub$/;"	c	class:CommandT
SubCommandOutput	vim/plugin/snippetsEmu.vim	/^function! s:SubCommandOutput(text)$/;"	f
SubSpecialVars	vim/plugin/snippetsEmu.vim	/^function! s:SubSpecialVars(text)$/;"	f
TARGET	vim/ruby/command-t/Makefile	/^TARGET = ext$/;"	m
TARGET_SO	vim/ruby/command-t/Makefile	/^TARGET_SO     = $(DLLIB)$/;"	m
TagList_IsValid	vim/plugin/taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	vim/plugin/taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	vim/plugin/taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	vim/plugin/taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
TheCWord	vim/autoload/rails.vim	/^function! s:TheCWord()$/;"	f
Tlist	vim/plugin/taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	vim/plugin/taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	vim/plugin/taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	vim/plugin/taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	vim/plugin/taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	vim/plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	vim/plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	vim/plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	vim/plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	vim/plugin/taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	vim/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	vim/plugin/taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	vim/plugin/taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	vim/plugin/taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	vim/plugin/taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	vim/plugin/taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	vim/plugin/taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	vim/plugin/taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	vim/plugin/taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	vim/plugin/taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	vim/plugin/taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	vim/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	vim/plugin/taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	vim/plugin/taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	vim/plugin/taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	vim/plugin/taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	vim/plugin/taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	vim/plugin/taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	vim/plugin/taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	vim/plugin/taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	vim/plugin/taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	vim/plugin/taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	vim/plugin/taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	vim/plugin/taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	vim/plugin/taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	vim/plugin/taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	vim/plugin/taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	vim/plugin/taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	vim/plugin/taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	vim/plugin/taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	vim/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	vim/plugin/taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	vim/plugin/taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	vim/plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	vim/plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	vim/plugin/taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	vim/plugin/taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	vim/plugin/taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	vim/plugin/taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	vim/plugin/taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	vim/plugin/taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	vim/plugin/taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	vim/plugin/taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	vim/plugin/taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	vim/plugin/taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	vim/plugin/taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	vim/plugin/taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	vim/plugin/taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	vim/plugin/taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	vim/plugin/taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	vim/plugin/taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	vim/plugin/taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	vim/plugin/taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	vim/plugin/taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	vim/plugin/taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	vim/plugin/taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	vim/plugin/taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	vim/plugin/taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	vim/plugin/taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	vim/plugin/taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	vim/plugin/taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	vim/plugin/taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	vim/plugin/taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	vim/plugin/taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	vim/plugin/taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	vim/plugin/taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	vim/plugin/taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	vim/plugin/taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	vim/plugin/taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
ToggleAutoClose	vim/plugin/autoclose.vim	/^function! s:ToggleAutoClose()$/;"	f
TreeDirNode.AbsoluteTreeRoot	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.addChild	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openRecursively	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.sortChildren	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootLineNum	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.bookmark	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.equals	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openSplit	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeFileNode.strDisplay	vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.strDisplay()$/;"	f
TriggerSnippet	vim/plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
UnHash	vim/plugin/snippetsEmu.vim	/^function! s:UnHash(text)$/;"	f
UnmapKey	vim/autoload/objc/pum_snippet.vim	/^fun s:UnmapKey(key)$/;"	f
UpFirst	vim/after/ftplugin/java_snippets.vim	/^function! UpFirst()$/;"	f
UpFirst	vim/after/ftplugin/objc_snippets.vim	/^function! UpFirst()$/;"	f
UpdateChangedSnip	vim/autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdateMethodList	vim/autoload/objc/method_list.vim	/^fun s:UpdateMethodList()$/;"	f
UpdatePlaceholderTabStops	vim/autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	vim/autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	vim/autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
UseVimball	vim/plugin/vimballPlugin.vim	/^com! -na=? -complete=dir  UseVimball  call vimball#Vimball(1,<f-args>)$/;"	c
VIM	vim/ruby/vim.rb	/^module VIM$/;"	m
VIM	vim/ruby/vim/screen.rb	/^module VIM$/;"	m
VIM	vim/ruby/vim/window.rb	/^module VIM$/;"	m
VPATH	vim/ruby/command-t/Makefile	/^VPATH = $(srcdir):$(topdir):$(hdrdir)$/;"	m
VimballHome	vim/autoload/vimball.vim	/^fun! s:VimballHome()$/;"	f
VimballList	vim/plugin/vimballPlugin.vim	/^com! -na=0                VimballList call vimball#Vimball(0)$/;"	c
Window	vim/ruby/vim/window.rb	/^  class Window$/;"	c	class:VIM
XcodeRun	vim/ftplugin/objc_cocoa_mappings.vim	/^fun s:XcodeRun(command)$/;"	f
[M	vim/ftplugin/ruby.vim	/^  noremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>','rubyDefine','b')<CR>$/;"	m
[[	vim/ftplugin/ruby.vim	/^  noremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>','rubyModule\\<Bar>rubyClass','b')<CR>$/;"	m
[]	vim/ftplugin/ruby.vim	/^  noremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>','rubyModule\\<Bar>rubyClass','b')<CR>$/;"	m
[m	vim/ftplugin/ruby.vim	/^  noremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>','rubyDefine','b')<CR>$/;"	m
]M	vim/ftplugin/ruby.vim	/^  noremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>','rubyDefine','')<CR>$/;"	m
][	vim/ftplugin/ruby.vim	/^  noremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>','rubyModule\\<Bar>rubyClass','')<CR>$/;"	m
]]	vim/ftplugin/ruby.vim	/^  noremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>','rubyModule\\<Bar>rubyClass','')<CR>$/;"	m
]m	vim/ftplugin/ruby.vim	/^  noremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>','rubyDefine','')<CR>$/;"	m
abbrev_segments	vim/ruby/command-t/prompt.rb	/^    def abbrev_segments$/;"	f	class:CommandT.Prompt
abolish_l	vim/plugin/rails.vim	/^function! s:abolish_l(word)$/;"	f
abolish_setup	vim/plugin/rails.vim	/^function! s:abolish_setup()$/;"	f
abolish_t	vim/plugin/rails.vim	/^function! s:abolish_t(word)$/;"	f
accept_selection	vim/ruby/command-t/controller.rb	/^    def accept_selection options = {}$/;"	f	class:CommandT.Controller
activateFufBuffer	vim/autoload/fuf.vim	/^function s:activateFufBuffer()$/;"	f
activateNode	vim/plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
add!	vim/ruby/command-t/match_window.rb	/^    def add! char$/;"	f	class:CommandT.MatchWindow
add!	vim/ruby/command-t/prompt.rb	/^    def add! char$/;"	f	class:CommandT.Prompt
add_methods	vim/autoload/rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
add_paths_for_directory	vim/ruby/command-t/scanner.rb	/^    def add_paths_for_directory dir, accumulator$/;"	f	class:CommandT.Scanner
addfilecmds	vim/autoload/rails.vim	/^function! s:addfilecmds(type)$/;"	f
addprojectdir	vim/autoload/rails.vim	/^function! s:addprojectdir(rr,parentdir,dir)$/;"	f
addtostatus	vim/autoload/rails.vim	/^function! s:addtostatus(letter,status)$/;"	f
all_tasks	capistrano_completion	/^  def all_tasks$/;"	f	class:CapistranoCompletion
app_background_script_command	vim/autoload/rails.vim	/^function! s:app_background_script_command(cmd) dict abort$/;"	f
app_dbext_settings	vim/autoload/rails.vim	/^function! s:app_dbext_settings(environment) dict$/;"	f
app_default_locale	vim/autoload/rails.vim	/^function! s:app_default_locale() dict abort$/;"	f
app_destroy_command	vim/autoload/rails.vim	/^function! s:app_destroy_command(bang,...) dict$/;"	f
app_environments	vim/autoload/rails.vim	/^function! s:app_environments() dict$/;"	f
app_eval	vim/autoload/rails.vim	/^function! s:app_eval(ruby,...) dict abort$/;"	f
app_execute_script_command	vim/autoload/rails.vim	/^function! s:app_execute_script_command(cmd) dict abort$/;"	f
app_file	vim/autoload/rails.vim	/^function! s:app_file(name)$/;"	f
app_find_file	vim/autoload/rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
app_generate_command	vim/autoload/rails.vim	/^function! s:app_generate_command(bang,...) dict$/;"	f
app_generators	vim/autoload/rails.vim	/^function! s:app_generators() dict$/;"	f
app_has	vim/autoload/rails.vim	/^function! s:app_has(feature) dict$/;"	f
app_has_file	vim/autoload/rails.vim	/^function! s:app_has_file(file) dict$/;"	f
app_lightweight_ruby_eval	vim/autoload/rails.vim	/^function! s:app_lightweight_ruby_eval(ruby,...) dict abort$/;"	f
app_migration	vim/autoload/rails.vim	/^function! s:app_migration(file) dict$/;"	f
app_named_route_file	vim/autoload/rails.vim	/^function! s:app_named_route_file(route) dict$/;"	f
app_path	vim/autoload/rails.vim	/^function! s:app_path(...) dict$/;"	f
app_rake_tasks	vim/autoload/rails.vim	/^function! s:app_rake_tasks() dict$/;"	f
app_relglob	vim/autoload/rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
app_route_names	vim/autoload/rails.vim	/^function! s:app_route_names() dict$/;"	f
app_ruby_shell_command	vim/autoload/rails.vim	/^function! s:app_ruby_shell_command(cmd) dict abort$/;"	f
app_runner_command	vim/autoload/rails.vim	/^function! s:app_runner_command(count,args) dict$/;"	f
app_script_command	vim/autoload/rails.vim	/^function! s:app_script_command(bang,...) dict$/;"	f
app_script_shell_command	vim/autoload/rails.vim	/^function! s:app_script_shell_command(cmd) dict abort$/;"	f
app_server_command	vim/autoload/rails.vim	/^function! s:app_server_command(bang,arg) dict$/;"	f
app_source_callback	vim/autoload/rails.vim	/^function! s:app_source_callback(file) dict$/;"	f
app_tags_command	vim/autoload/rails.vim	/^function! s:app_tags_command() dict$/;"	f
app_test_suites	vim/autoload/rails.vim	/^function! s:app_test_suites() dict$/;"	f
app_user_assertions	vim/autoload/rails.vim	/^function! s:app_user_assertions() dict$/;"	f
app_user_classes	vim/autoload/rails.vim	/^function! s:app_user_classes() dict$/;"	f
arch	vim/ruby/command-t/Makefile	/^arch = i686-darwin10.0.0$/;"	m
archdir	vim/ruby/command-t/Makefile	/^archdir = $(rubylibdir)\/$(arch)$/;"	m
archflag	vim/ruby/command-t/Makefile	/^archflag = $/;"	m
argv	vim/lib/extras/cocoa_classes.py	/^    from sys import argv$/;"	i
argv	vim/lib/extras/cocoa_definitions.py	/^from sys import argv$/;"	i
argv	vim/lib/extras/cocoa_methods.py	/^    from sys import argv$/;"	i
autocamelize	vim/autoload/rails.vim	/^function! s:autocamelize(files,test)$/;"	f
autoload	vim/plugin/rails.vim	/^function! s:autoload(...)$/;"	f
b:browsefilter	vim/ftplugin/eruby.vim	/^  let b:browsefilter="eRuby Files (*.erb, *.rhtml)\\t*.erb;*.rhtml\\n" . s:browsefilter$/;"	v
b:browsefilter	vim/ftplugin/ruby.vim	/^  let b:browsefilter = "Ruby Source Files (*.rb)\\t*.rb\\n" .$/;"	v
b:cocoa_proj	vim/ftplugin/objc_cocoa_mappings.vim	/^			let b:cocoa_proj = fnameescape(globpath(expand('<afile>:p:h:h:h:h'), '*.xcodeproj'))$/;"	v
b:cocoa_proj	vim/ftplugin/objc_cocoa_mappings.vim	/^		let b:cocoa_proj = fnameescape(globpath(expand('<afile>:p:h:h:h'), '*.xcodeproj'))$/;"	v
b:cocoa_proj	vim/ftplugin/objc_cocoa_mappings.vim	/^	let b:cocoa_proj  = fnameescape(globpath(expand('<afile>:p:h:h'), '*.xcodeproj'))$/;"	v
b:cocoa_proj	vim/ftplugin/objc_cocoa_mappings.vim	/^let b:cocoa_proj = fnameescape(globpath(expand('<afile>:p:h'), '*.xcodeproj'))$/;"	v
b:current_syntax	vim/plugin/markdown.vim	/^let b:current_syntax = "markdown"$/;"	v
b:current_syntax	vim/syntax/cucumber.vim	/^let b:current_syntax = "cucumber"$/;"	v
b:current_syntax	vim/syntax/eruby.vim	/^let b:current_syntax = 'eruby'$/;"	v
b:current_syntax	vim/syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	vim/syntax/json.vim	/^let b:current_syntax = "json"$/;"	v
b:current_syntax	vim/syntax/rdoc.vim	/^let b:current_syntax = "rdoc"$/;"	v
b:current_syntax	vim/syntax/ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
b:did_ftplugin	vim/ftplugin/eruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim/ftplugin/ruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	vim/indent/cucumber.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim/indent/eruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim/indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim/indent/ruby.vim	/^let b:did_indent = 1$/;"	v
b:eruby_nest_level	vim/syntax/eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:eruby_nest_level	vim/syntax/eruby.vim	/^  let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_subtype	vim/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	vim/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	vim/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	vim/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	vim/ftplugin/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	vim/ftplugin/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	vim/ftplugin/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eruby_subtype	vim/ftplugin/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	vim/syntax/eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	vim/syntax/eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	vim/syntax/eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	vim/syntax/eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	vim/syntax/eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	vim/syntax/eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	vim/syntax/eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:eruby_subtype	vim/syntax/eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype_indentexpr	vim/indent/eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
b:javascript_fold	vim/syntax/javascript.vim	/^let b:javascript_fold='true'$/;"	v
b:match_ignorecase	vim/ftplugin/ruby.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_skip	vim/ftplugin/ruby.vim	/^  let b:match_skip =$/;"	v
b:match_words	vim/ftplugin/eruby.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	vim/ftplugin/ruby.vim	/^  let b:match_words =$/;"	v
b:rltvnmbrmode	vim/plugin/RltvNmbrPlugin.vim	/^ let b:rltvnmbrmode= 0$/;"	v
b:ruby_no_expensive	vim/syntax/ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
b:undo_ftplugin	vim/ftplugin/eruby.vim	/^let b:undo_ftplugin = "setl cms< "$/;"	v
b:undo_ftplugin	vim/ftplugin/markdown.vim	/^let b:undo_ftplugin .= "|setl cms< com< fo<"$/;"	v
b:undo_ftplugin	vim/ftplugin/ruby.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	vim/ftplugin/ruby.vim	/^let b:undo_ftplugin = "setl fo< inc< inex< sua< def< com< cms< path< kp<"$/;"	v
backspace	vim/ruby/command-t/controller.rb	/^    def backspace$/;"	f	class:CommandT.Controller
backspace!	vim/ruby/command-t/match_window.rb	/^    def backspace!$/;"	f	class:CommandT.MatchWindow
backspace!	vim/ruby/command-t/prompt.rb	/^    def backspace!$/;"	f	class:CommandT.Prompt
beep	vim/plugin/surround.vim	/^function! s:beep()$/;"	f
benchmark	irbrc	/^def benchmark(times = 1000, samples = 20)$/;"	f
bindMappings	vim/plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bindir	vim/ruby/command-t/Makefile	/^bindir = $(exec_prefix)\/bin$/;"	m
bookmarkHere	vim/autoload/fuf/bookmark.vim	/^function s:bookmarkHere(word)$/;"	f
bookmarkNode	vim/plugin/NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bufInWindows	vim/plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
buffer_app	vim/autoload/rails.vim	/^function! s:buffer_app() dict abort$/;"	f
buffer_getline	vim/autoload/rails.vim	/^function! s:buffer_getline(...) dict abort$/;"	f
buffer_getvar	vim/autoload/rails.vim	/^function! s:buffer_getvar(varname) dict abort$/;"	f
buffer_lines	vim/autoload/rails.vim	/^function! s:buffer_lines() dict abort$/;"	f
buffer_name	vim/autoload/rails.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_number	vim/autoload/rails.vim	/^function! s:buffer_number() dict abort$/;"	f
buffer_path	vim/autoload/rails.vim	/^function! s:buffer_path() dict abort$/;"	f
buffer_setvar	vim/autoload/rails.vim	/^function! s:buffer_setvar(varname, val) dict abort$/;"	f
buffer_type_name	vim/autoload/rails.vim	/^function! s:buffer_type_name(...) dict abort$/;"	f
cCommandTMatch	vim/ruby/command-t/ext.c	/^VALUE cCommandTMatch    = 0; \/\/ class CommandT::Match$/;"	v
cCommandTMatcher	vim/ruby/command-t/ext.c	/^VALUE cCommandTMatcher  = 0; \/\/ class CommandT::Matcher$/;"	v
cache_clear	vim/autoload/rails.vim	/^function! s:cache_clear(...) dict$/;"	f
cache_current?	capistrano_completion	/^  def cache_current?$/;"	f	class:CapistranoCompletion
cache_file	capistrano_completion	/^  def cache_file$/;"	f	class:CapistranoCompletion
cache_get	vim/autoload/rails.vim	/^function! s:cache_get(...) dict$/;"	f
cache_has	vim/autoload/rails.vim	/^function! s:cache_has(key) dict$/;"	f
cache_needs	vim/autoload/rails.vim	/^function! s:cache_needs(key) dict$/;"	f
cache_set	vim/autoload/rails.vim	/^function! s:cache_set(key,value) dict$/;"	f
cancel	vim/ruby/command-t/controller.rb	/^    def cancel$/;"	f	class:CommandT.Controller
capfile	capistrano_completion	/^  def capfile$/;"	f	class:CapistranoCompletion
cd	vim/after/ftplugin/actionscript_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/aspvbs_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/c_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/css_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/django_model_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/django_template_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/f-script_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/haskell_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/html_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/java_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/javascript_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/latex_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/logo_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/lua_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/markdown_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/movable_type_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/objc_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/ocaml_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/perl_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/php_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/phpdoc_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/propel_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/python_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/rails_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/ruby_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/sh_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/slate_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/smarty_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/symfony_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/tcl_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/template_toolkit_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/tex_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
cd	vim/after/ftplugin/xhtml_snippets.vim	/^let cd = g:snip_elem_delim$/;"	v
centerView	vim/plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	vim/plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	vim/plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
change_log	railsrc	/^def change_log(stream)$/;"	f
changesurround	vim/plugin/surround.vim	/^function! s:changesurround() " {{{1$/;"	f
cheat	irbrc	/^def cheat arg$/;"	f
checkForActivate	vim/plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	vim/plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
clear	vim/ruby/command-t/controller.rb	/^    def clear$/;"	f	class:CommandT.Controller
clear	vim/ruby/command-t/match_window.rb	/^    def clear$/;"	f	class:CommandT.MatchWindow
clear!	vim/ruby/command-t/prompt.rb	/^    def clear!$/;"	f	class:CommandT.Prompt
clearBookmarks	vim/plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
close	vim/ruby/command-t/match_window.rb	/^    def close$/;"	f	class:CommandT.MatchWindow
closeChildren	vim/plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	vim/plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	vim/plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	vim/plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	vim/plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	vim/plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
close_func_arg	vim/plugin/autoclose.vim	/^        let close_func_arg = '"' . s:charsToClose[key] . '"'$/;"	v
close_func_arg	vim/plugin/autoclose.vim	/^        let close_func_arg = '"\\""'$/;"	v
closematch	vim/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
cocoa_definitions	vim/lib/extras/build_syntaxfile.py	/^import cocoa_definitions$/;"	i
colors_name	vim/colors/ir_black.vim	/^let colors_name = "ir_black"$/;"	v
columns	vim/ruby/vim/screen.rb	/^    def self.columns$/;"	F	class:VIM.Screen
commands	vim/lib/extras/cocoa_definitions.py	/^import os, commands, re$/;"	i
comp_alpha	vim/ruby/command-t/matcher.c	/^int comp_alpha(const void *a, const void *b)$/;"	f
comp_score	vim/ruby/command-t/matcher.c	/^int comp_score(const void *a, const void *b)$/;"	f
compact	vim/autoload/rails.vim	/^function! s:compact(ary)$/;"	f
compareBookmarks	vim/plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	vim/plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
compareTimeDescending	vim/autoload/fuf/buffer.vim	/^function s:compareTimeDescending(i1, i2)$/;"	f
completeBookmarks	vim/plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
completion_filter	vim/autoload/rails.vim	/^function! s:completion_filter(results,A)$/;"	f
controller	vim/autoload/rails.vim	/^function! s:controller(...)$/;"	f
controllerEdit	vim/autoload/rails.vim	/^function! s:controllerEdit(cmd,...)$/;"	f
controllerList	vim/autoload/rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
convertWildcardToRegexp	vim/autoload/fuf.vim	/^function s:convertWildcardToRegexp(expr)$/;"	f
copy	irbrc	/^def copy(str)$/;"	f
copyNode	vim/plugin/NERD_tree.vim	/^function! s:copyNode()$/;"	f
createTreeWin	vim/plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
crend	vim/plugin/endwise.vim	/^function! s:crend(always)$/;"	f
cs	vim/plugin/surround.vim	/^    nmap          cs   <Plug>Csurround$/;"	m
current_compiler	vim/compiler/eruby.vim	/^let current_compiler = "eruby"$/;"	v
current_compiler	vim/compiler/ruby.vim	/^let current_compiler = "ruby"$/;"	v
current_compiler	vim/compiler/rubyunit.vim	/^let current_compiler = "rubyunit"$/;"	v
cursor_end	vim/ruby/command-t/controller.rb	/^    def cursor_end$/;"	f	class:CommandT.Controller
cursor_end	vim/ruby/command-t/prompt.rb	/^    def cursor_end$/;"	f	class:CommandT.Prompt
cursor_left	vim/ruby/command-t/controller.rb	/^    def cursor_left$/;"	f	class:CommandT.Controller
cursor_left	vim/ruby/command-t/prompt.rb	/^    def cursor_left$/;"	f	class:CommandT.Prompt
cursor_right	vim/ruby/command-t/controller.rb	/^    def cursor_right$/;"	f	class:CommandT.Controller
cursor_right	vim/ruby/command-t/prompt.rb	/^    def cursor_right$/;"	f	class:CommandT.Prompt
cursor_start	vim/ruby/command-t/controller.rb	/^    def cursor_start$/;"	f	class:CommandT.Controller
cursor_start	vim/ruby/command-t/prompt.rb	/^    def cursor_start$/;"	f	class:CommandT.Prompt
datadir	vim/ruby/command-t/Makefile	/^datadir = $(datarootdir)$/;"	m
datarootdir	vim/ruby/command-t/Makefile	/^datarootdir = $(prefix)\/share$/;"	m
datetime	vim/lib/extras/build_syntaxfile.py	/^import sys, datetime$/;"	i
deactivateFufBuffer	vim/autoload/fuf.vim	/^function s:deactivateFufBuffer()$/;"	f
debug	vim/autoload/rails.vim	/^function! s:debug(str)$/;"	f
default_headers	vim/lib/extras/cocoa_definitions.py	/^def default_headers():$/;"	f
default_headers	vim/lib/extras/cocoa_methods.py	/^from cocoa_definitions import default_headers, format_function_line$/;"	i
default_open_command	vim/ruby/command-t/controller.rb	/^    def default_open_command$/;"	f	class:CommandT.Controller
defineOption	vim/plugin/fuf.vim	/^function s:defineOption(name, default)$/;"	f
delete	vim/ruby/command-t/controller.rb	/^    def delete$/;"	f	class:CommandT.Controller
delete!	vim/ruby/command-t/prompt.rb	/^    def delete!$/;"	f	class:CommandT.Prompt
deleteBookmark	vim/plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
deleteNode	vim/plugin/NERD_tree.vim	/^function! s:deleteNode()$/;"	f
describe	railsrc	/^def describe(model)$/;"	f
deserializeInfoMap	vim/autoload/fuf.vim	/^function s:deserializeInfoMap(lines)$/;"	f
did_javascript_syn_inits	vim/syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_json_syn_inits	vim/syntax/json.vim	/^    let did_json_syn_inits = 1$/;"	v
did_ruby_syntax_inits	vim/syntax/eruby.vim	/^    let did_ruby_syntax_inits = 1$/;"	v
did_txt_syn_inits	vim/syntax/textile.vim	/^        let did_txt_syn_inits = 1$/;"	v
displayHelp	vim/plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
dispose	vim/ruby/command-t/prompt.rb	/^    def dispose$/;"	f	class:CommandT.Prompt
djump	vim/autoload/rails.vim	/^function! s:djump(def)$/;"	f
dldflags	vim/ruby/command-t/Makefile	/^dldflags = $/;"	m
docdir	vim/ruby/command-t/Makefile	/^docdir = $(datarootdir)\/doc\/$(PACKAGE)$/;"	m
dosurround	vim/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
dprint	vim/autoload/rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
ds	vim/plugin/surround.vim	/^    nmap          ds   <Plug>Dsurround$/;"	m
dumpHelp	vim/plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
dvidir	vim/ruby/command-t/Makefile	/^dvidir = $(docdir)$/;"	m
echo	vim/plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	vim/plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	vim/plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
edit	vim/autoload/rails.vim	/^function! s:edit(cmd,file,...)$/;"	f
editcmdfor	vim/autoload/rails.vim	/^function! s:editcmdfor(cmd)$/;"	f
encodeURIComponent	vim/plugin/gist.vim	/^function! s:encodeURIComponent(instr)$/;"	f
endof	vim/autoload/rails.vim	/^function! s:endof(lnum)$/;"	f
enumHelpTags	vim/autoload/fuf/help.vim	/^function s:enumHelpTags(tagFiles)$/;"	f
enumItems	vim/autoload/fuf/callbackfile.vim	/^function s:enumItems(dir)$/;"	f
enumItems	vim/autoload/fuf/dir.vim	/^function s:enumItems(dir)$/;"	f
enumItems	vim/autoload/fuf/file.vim	/^function s:enumItems(dir)$/;"	f
enumNonCurrentItems	vim/autoload/fuf/file.vim	/^function s:enumNonCurrentItems(dir, bufNr, cache)$/;"	f
enumTaggedFiles	vim/autoload/fuf/taggedfile.vim	/^function s:enumTaggedFiles(tagFiles)$/;"	f
enumTags	vim/autoload/fuf/tag.vim	/^function s:enumTags(tagFiles)$/;"	f
environment	vim/autoload/rails.vim	/^function! s:environment()$/;"	f
environmentEdit	vim/autoload/rails.vim	/^function! s:environmentEdit(cmd,...)$/;"	f
environmentList	vim/autoload/rails.vim	/^function! s:environmentList(A,L,P)$/;"	f
error	vim/autoload/rails.vim	/^function! s:error(str)$/;"	f
error	vim/plugin/rails.vim	/^function! s:error(str)$/;"	f
escape_for_single_quotes	vim/ruby/vim.rb	/^  def self.escape_for_single_quotes str$/;"	F	class:VIM
escarg	vim/autoload/rails.vim	/^function! s:escarg(p)$/;"	f
esccmd	vim/autoload/rails.vim	/^function! s:esccmd(p)$/;"	f
escvar	vim/plugin/rails.vim	/^function! s:escvar(r)$/;"	f
et	vim/after/ftplugin/actionscript_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/aspvbs_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/c_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/css_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/django_model_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/django_template_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/f-script_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/haskell_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/html_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/java_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/javascript_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/latex_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/logo_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/lua_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/markdown_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/movable_type_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/objc_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/ocaml_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/perl_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/php_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/phpdoc_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/propel_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/python_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/rails_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/ruby_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/sh_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/slate_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/smarty_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/symfony_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/tcl_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/template_toolkit_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/tex_snippets.vim	/^let et = g:snip_end_tag$/;"	v
et	vim/after/ftplugin/xhtml_snippets.vim	/^let et = g:snip_end_tag$/;"	v
evaluateLearningRank	vim/autoload/fuf.vim	/^function s:evaluateLearningRank(word, stats)$/;"	f
exec	vim/plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
exec_prefix	vim/ruby/command-t/Makefile	/^exec_prefix = $(prefix)$/;"	m
executeNode	vim/plugin/NERD_tree.vim	/^function! s:executeNode()$/;"	f
expandAbbrevMap	vim/autoload/fuf.vim	/^function s:expandAbbrevMap(pattern, abbrevMap)$/;"	f
extout	vim/ruby/command-t/Makefile	/^extout = $/;"	m
extout_prefix	vim/ruby/command-t/Makefile	/^extout_prefix = $/;"	m
extract_file_to	vim/lib/extras/cocoa_methods.py	/^def extract_file_to(fname=None):$/;"	f
extract_files_to	vim/lib/extras/cocoa_definitions.py	/^def extract_files_to(dirname=None):$/;"	f
extractafter	vim/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	vim/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
extractdbvar	vim/autoload/rails.vim	/^function! s:extractdbvar(str,arg)$/;"	f
file_getline	vim/autoload/rails.vim	/^function! s:file_getline(lnum,...) dict abort$/;"	f
file_lines	vim/autoload/rails.vim	/^function! s:file_lines() dict abort$/;"	f
file_name	vim/autoload/rails.vim	/^function! s:file_name() dict abort$/;"	f
file_path	vim/autoload/rails.vim	/^function! s:file_path() dict abort$/;"	f
find	vim/lib/extras/cocoa_classes.py	/^from cocoa_definitions import write_file, find$/;"	i
find	vim/lib/extras/cocoa_definitions.py	/^def find(searchpath, ext):$/;"	f
find	vim/ruby/command-t/match_window.rb	/^    def find char$/;"	f	class:CommandT.MatchWindow
findItem	vim/autoload/fuf/bookmark.vim	/^function s:findItem(items, word)$/;"	f
findItem	vim/autoload/fuf/buffer.vim	/^function s:findItem(items, word)$/;"	f
find_headers	vim/lib/extras/cocoa_classes.py	/^def find_headers(root_folder, frameworks):$/;"	f
find_headers	vim/lib/extras/cocoa_definitions.py	/^def find_headers(root_folder, frameworks):$/;"	f
findamethod	vim/autoload/rails.vim	/^function! s:findamethod(func,repl)$/;"	f
findasymbol	vim/autoload/rails.vim	/^function! s:findasymbol(sym,repl)$/;"	f
findcmdfor	vim/autoload/rails.vim	/^function! s:findcmdfor(cmd)$/;"	f
findedit	vim/autoload/rails.vim	/^function! s:findedit(cmd,files,...) abort$/;"	f
findfromview	vim/autoload/rails.vim	/^function! s:findfromview(func,repl)$/;"	f
findit	vim/autoload/rails.vim	/^function! s:findit(pat,repl)$/;"	f
findlayout	vim/autoload/rails.vim	/^function! s:findlayout(name)$/;"	f
findview	vim/autoload/rails.vim	/^function! s:findview(name)$/;"	f
firstNormalWindow	vim/plugin/NERD_tree.vim	/^function! s:firstNormalWindow()$/;"	f
fixindent	vim/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
fixturesEdit	vim/autoload/rails.vim	/^function! s:fixturesEdit(cmd,...)$/;"	f
fixturesList	vim/autoload/rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
flush	vim/ruby/command-t/controller.rb	/^    def flush$/;"	f	class:CommandT.Controller
flush	vim/ruby/command-t/finder.rb	/^    def flush$/;"	f	class:CommandT.Finder
flush	vim/ruby/command-t/scanner.rb	/^    def flush$/;"	f	class:CommandT.Scanner
flush	vim/ruby/command-t/stub.rb	/^    def flush$/;"	f	class:CommandT.Stub
focus	vim/ruby/command-t/match_window.rb	/^    def focus$/;"	f	class:CommandT.MatchWindow
focus	vim/ruby/command-t/prompt.rb	/^    def focus$/;"	f	class:CommandT.Prompt
format	vim/autoload/rails.vim	/^function! s:format(...)$/;"	f
formatItemUsingCache	vim/autoload/fuf/mrufile.vim	/^function s:formatItemUsingCache(item)$/;"	f
format_function_line	vim/lib/extras/cocoa_definitions.py	/^def format_function_line(line):$/;"	f
format_function_line	vim/lib/extras/cocoa_methods.py	/^from cocoa_definitions import default_headers, format_function_line$/;"	i
format_line	vim/lib/extras/cocoa_methods.py	/^def format_line(line):$/;"	f
fuf#bookmark#createHandler	vim/autoload/fuf/bookmark.vim	/^function fuf#bookmark#createHandler(base)$/;"	f
fuf#bookmark#getSwitchOrder	vim/autoload/fuf/bookmark.vim	/^function fuf#bookmark#getSwitchOrder()$/;"	f
fuf#bookmark#onInit	vim/autoload/fuf/bookmark.vim	/^function fuf#bookmark#onInit()$/;"	f
fuf#bookmark#renewCache	vim/autoload/fuf/bookmark.vim	/^function fuf#bookmark#renewCache()$/;"	f
fuf#bookmark#requiresOnCommandPre	vim/autoload/fuf/bookmark.vim	/^function fuf#bookmark#requiresOnCommandPre()$/;"	f
fuf#buffer#createHandler	vim/autoload/fuf/buffer.vim	/^function fuf#buffer#createHandler(base)$/;"	f
fuf#buffer#getSwitchOrder	vim/autoload/fuf/buffer.vim	/^function fuf#buffer#getSwitchOrder()$/;"	f
fuf#buffer#onInit	vim/autoload/fuf/buffer.vim	/^function fuf#buffer#onInit()$/;"	f
fuf#buffer#renewCache	vim/autoload/fuf/buffer.vim	/^function fuf#buffer#renewCache()$/;"	f
fuf#buffer#requiresOnCommandPre	vim/autoload/fuf/buffer.vim	/^function fuf#buffer#requiresOnCommandPre()$/;"	f
fuf#callbackfile#createHandler	vim/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#createHandler(base)$/;"	f
fuf#callbackfile#getSwitchOrder	vim/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#getSwitchOrder()$/;"	f
fuf#callbackfile#launch	vim/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#launch(initialPattern, partialMatching, prompt, exclude, listener)$/;"	f
fuf#callbackfile#onInit	vim/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#onInit()$/;"	f
fuf#callbackfile#renewCache	vim/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#renewCache()$/;"	f
fuf#callbackfile#requiresOnCommandPre	vim/autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#requiresOnCommandPre()$/;"	f
fuf#callbackitem#createHandler	vim/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#createHandler(base)$/;"	f
fuf#callbackitem#getSwitchOrder	vim/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#getSwitchOrder()$/;"	f
fuf#callbackitem#launch	vim/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#launch(initialPattern, partialMatching, prompt, listener, items, forPath)$/;"	f
fuf#callbackitem#onInit	vim/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#onInit()$/;"	f
fuf#callbackitem#renewCache	vim/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#renewCache()$/;"	f
fuf#callbackitem#requiresOnCommandPre	vim/autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#requiresOnCommandPre()$/;"	f
fuf#changelist#createHandler	vim/autoload/fuf/changelist.vim	/^function fuf#changelist#createHandler(base)$/;"	f
fuf#changelist#getSwitchOrder	vim/autoload/fuf/changelist.vim	/^function fuf#changelist#getSwitchOrder()$/;"	f
fuf#changelist#onInit	vim/autoload/fuf/changelist.vim	/^function fuf#changelist#onInit()$/;"	f
fuf#changelist#renewCache	vim/autoload/fuf/changelist.vim	/^function fuf#changelist#renewCache()$/;"	f
fuf#changelist#requiresOnCommandPre	vim/autoload/fuf/changelist.vim	/^function fuf#changelist#requiresOnCommandPre()$/;"	f
fuf#compareRanks	vim/autoload/fuf.vim	/^function fuf#compareRanks(i1, i2)$/;"	f
fuf#concat	vim/autoload/fuf.vim	/^function fuf#concat(items)$/;"	f
fuf#countModifiedFiles	vim/autoload/fuf.vim	/^function fuf#countModifiedFiles(files, time)$/;"	f
fuf#defineKeyMappingInHandler	vim/autoload/fuf.vim	/^function fuf#defineKeyMappingInHandler(key, func)$/;"	f
fuf#defineLaunchCommand	vim/autoload/fuf.vim	/^function fuf#defineLaunchCommand(CmdName, modeName, prefixInitialPattern)$/;"	f
fuf#dir#createHandler	vim/autoload/fuf/dir.vim	/^function fuf#dir#createHandler(base)$/;"	f
fuf#dir#getSwitchOrder	vim/autoload/fuf/dir.vim	/^function fuf#dir#getSwitchOrder()$/;"	f
fuf#dir#onInit	vim/autoload/fuf/dir.vim	/^function fuf#dir#onInit()$/;"	f
fuf#dir#renewCache	vim/autoload/fuf/dir.vim	/^function fuf#dir#renewCache()$/;"	f
fuf#dir#requiresOnCommandPre	vim/autoload/fuf/dir.vim	/^function fuf#dir#requiresOnCommandPre()$/;"	f
fuf#echoWithHl	vim/autoload/fuf.vim	/^function fuf#echoWithHl(msg, hl)$/;"	f
fuf#editInfoFile	vim/autoload/fuf.vim	/^function fuf#editInfoFile()$/;"	f
fuf#enumExpandedDirsEntries	vim/autoload/fuf.vim	/^function fuf#enumExpandedDirsEntries(dir, exclude)$/;"	f
fuf#expandTailDotSequenceToParentDir	vim/autoload/fuf.vim	/^function fuf#expandTailDotSequenceToParentDir(pattern)$/;"	f
fuf#file#createHandler	vim/autoload/fuf/file.vim	/^function fuf#file#createHandler(base)$/;"	f
fuf#file#getSwitchOrder	vim/autoload/fuf/file.vim	/^function fuf#file#getSwitchOrder()$/;"	f
fuf#file#onInit	vim/autoload/fuf/file.vim	/^function fuf#file#onInit()$/;"	f
fuf#file#renewCache	vim/autoload/fuf/file.vim	/^function fuf#file#renewCache()$/;"	f
fuf#file#requiresOnCommandPre	vim/autoload/fuf/file.vim	/^function fuf#file#requiresOnCommandPre()$/;"	f
fuf#filterWithLimit	vim/autoload/fuf.vim	/^function fuf#filterWithLimit(items, expr, limit)$/;"	f
fuf#formatPrompt	vim/autoload/fuf.vim	/^function fuf#formatPrompt(prompt, partialMatching)$/;"	f
fuf#getCurrentTagFiles	vim/autoload/fuf.vim	/^function fuf#getCurrentTagFiles()$/;"	f
fuf#getFileLines	vim/autoload/fuf.vim	/^function fuf#getFileLines(file)$/;"	f
fuf#getPathSeparator	vim/autoload/fuf.vim	/^function fuf#getPathSeparator()$/;"	f
fuf#getRunningHandler	vim/autoload/fuf.vim	/^function fuf#getRunningHandler()$/;"	f
fuf#givencmd#createHandler	vim/autoload/fuf/givencmd.vim	/^function fuf#givencmd#createHandler(base)$/;"	f
fuf#givencmd#getSwitchOrder	vim/autoload/fuf/givencmd.vim	/^function fuf#givencmd#getSwitchOrder()$/;"	f
fuf#givencmd#launch	vim/autoload/fuf/givencmd.vim	/^function fuf#givencmd#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givencmd#onInit	vim/autoload/fuf/givencmd.vim	/^function fuf#givencmd#onInit()$/;"	f
fuf#givencmd#renewCache	vim/autoload/fuf/givencmd.vim	/^function fuf#givencmd#renewCache()$/;"	f
fuf#givencmd#requiresOnCommandPre	vim/autoload/fuf/givencmd.vim	/^function fuf#givencmd#requiresOnCommandPre()$/;"	f
fuf#givendir#createHandler	vim/autoload/fuf/givendir.vim	/^function fuf#givendir#createHandler(base)$/;"	f
fuf#givendir#getSwitchOrder	vim/autoload/fuf/givendir.vim	/^function fuf#givendir#getSwitchOrder()$/;"	f
fuf#givendir#launch	vim/autoload/fuf/givendir.vim	/^function fuf#givendir#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givendir#onInit	vim/autoload/fuf/givendir.vim	/^function fuf#givendir#onInit()$/;"	f
fuf#givendir#renewCache	vim/autoload/fuf/givendir.vim	/^function fuf#givendir#renewCache()$/;"	f
fuf#givendir#requiresOnCommandPre	vim/autoload/fuf/givendir.vim	/^function fuf#givendir#requiresOnCommandPre()$/;"	f
fuf#givenfile#createHandler	vim/autoload/fuf/givenfile.vim	/^function fuf#givenfile#createHandler(base)$/;"	f
fuf#givenfile#getSwitchOrder	vim/autoload/fuf/givenfile.vim	/^function fuf#givenfile#getSwitchOrder()$/;"	f
fuf#givenfile#launch	vim/autoload/fuf/givenfile.vim	/^function fuf#givenfile#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givenfile#onInit	vim/autoload/fuf/givenfile.vim	/^function fuf#givenfile#onInit()$/;"	f
fuf#givenfile#renewCache	vim/autoload/fuf/givenfile.vim	/^function fuf#givenfile#renewCache()$/;"	f
fuf#givenfile#requiresOnCommandPre	vim/autoload/fuf/givenfile.vim	/^function fuf#givenfile#requiresOnCommandPre()$/;"	f
fuf#hash224	vim/autoload/fuf.vim	/^function fuf#hash224(str)$/;"	f
fuf#help#createHandler	vim/autoload/fuf/help.vim	/^function fuf#help#createHandler(base)$/;"	f
fuf#help#getSwitchOrder	vim/autoload/fuf/help.vim	/^function fuf#help#getSwitchOrder()$/;"	f
fuf#help#onInit	vim/autoload/fuf/help.vim	/^function fuf#help#onInit()$/;"	f
fuf#help#renewCache	vim/autoload/fuf/help.vim	/^function fuf#help#renewCache()$/;"	f
fuf#help#requiresOnCommandPre	vim/autoload/fuf/help.vim	/^function fuf#help#requiresOnCommandPre()$/;"	f
fuf#inputHl	vim/autoload/fuf.vim	/^function fuf#inputHl(prompt, text, hl)$/;"	f
fuf#jumplist#createHandler	vim/autoload/fuf/jumplist.vim	/^function fuf#jumplist#createHandler(base)$/;"	f
fuf#jumplist#getSwitchOrder	vim/autoload/fuf/jumplist.vim	/^function fuf#jumplist#getSwitchOrder()$/;"	f
fuf#jumplist#onInit	vim/autoload/fuf/jumplist.vim	/^function fuf#jumplist#onInit()$/;"	f
fuf#jumplist#renewCache	vim/autoload/fuf/jumplist.vim	/^function fuf#jumplist#renewCache()$/;"	f
fuf#jumplist#requiresOnCommandPre	vim/autoload/fuf/jumplist.vim	/^function fuf#jumplist#requiresOnCommandPre()$/;"	f
fuf#launch	vim/autoload/fuf.vim	/^function fuf#launch(modeName, initialPattern, partialMatching)$/;"	f
fuf#line#createHandler	vim/autoload/fuf/line.vim	/^function fuf#line#createHandler(base)$/;"	f
fuf#line#getSwitchOrder	vim/autoload/fuf/line.vim	/^function fuf#line#getSwitchOrder()$/;"	f
fuf#line#onInit	vim/autoload/fuf/line.vim	/^function fuf#line#onInit()$/;"	f
fuf#line#renewCache	vim/autoload/fuf/line.vim	/^function fuf#line#renewCache()$/;"	f
fuf#line#requiresOnCommandPre	vim/autoload/fuf/line.vim	/^function fuf#line#requiresOnCommandPre()$/;"	f
fuf#loadInfoFile	vim/autoload/fuf.vim	/^function fuf#loadInfoFile(modeName)$/;"	f
fuf#makeNonPathItem	vim/autoload/fuf.vim	/^function fuf#makeNonPathItem(word, menu)$/;"	f
fuf#makePathItem	vim/autoload/fuf.vim	/^function fuf#makePathItem(fname, menu, appendsDirSuffix)$/;"	f
fuf#makePatternSet	vim/autoload/fuf.vim	/^function fuf#makePatternSet(patternBase, interpreter, partialMatching)$/;"	f
fuf#makePreviewLinesAround	vim/autoload/fuf.vim	/^function fuf#makePreviewLinesAround(lines, indices, page, maxHeight)$/;"	f
fuf#makePreviewLinesForFile	vim/autoload/fuf.vim	/^function fuf#makePreviewLinesForFile(file, count, maxHeight)$/;"	f
fuf#mapToSetAbbrWithSnippedWordAsPath	vim/autoload/fuf.vim	/^function fuf#mapToSetAbbrWithSnippedWordAsPath(items)$/;"	f
fuf#mapToSetSerialIndex	vim/autoload/fuf.vim	/^function fuf#mapToSetSerialIndex(in, offset)$/;"	f
fuf#mrucmd#createHandler	vim/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#createHandler(base)$/;"	f
fuf#mrucmd#getSwitchOrder	vim/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#getSwitchOrder()$/;"	f
fuf#mrucmd#onCommandPre	vim/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#onCommandPre(cmd)$/;"	f
fuf#mrucmd#onInit	vim/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#onInit()$/;"	f
fuf#mrucmd#renewCache	vim/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#renewCache()$/;"	f
fuf#mrucmd#requiresOnCommandPre	vim/autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#requiresOnCommandPre()$/;"	f
fuf#mrufile#createHandler	vim/autoload/fuf/mrufile.vim	/^function fuf#mrufile#createHandler(base)$/;"	f
fuf#mrufile#getSwitchOrder	vim/autoload/fuf/mrufile.vim	/^function fuf#mrufile#getSwitchOrder()$/;"	f
fuf#mrufile#onInit	vim/autoload/fuf/mrufile.vim	/^function fuf#mrufile#onInit()$/;"	f
fuf#mrufile#renewCache	vim/autoload/fuf/mrufile.vim	/^function fuf#mrufile#renewCache()$/;"	f
fuf#mrufile#requiresOnCommandPre	vim/autoload/fuf/mrufile.vim	/^function fuf#mrufile#requiresOnCommandPre()$/;"	f
fuf#onComplete	vim/autoload/fuf.vim	/^function fuf#onComplete(findstart, base)$/;"	f
fuf#openBuffer	vim/autoload/fuf.vim	/^function fuf#openBuffer(bufNr, mode, reuse)$/;"	f
fuf#openFile	vim/autoload/fuf.vim	/^function fuf#openFile(path, mode, reuse)$/;"	f
fuf#openHelp	vim/autoload/fuf.vim	/^function fuf#openHelp(tag, mode)$/;"	f
fuf#openTag	vim/autoload/fuf.vim	/^function fuf#openTag(tag, mode)$/;"	f
fuf#prejump	vim/autoload/fuf.vim	/^function fuf#prejump(mode)$/;"	f
fuf#quickfix#createHandler	vim/autoload/fuf/quickfix.vim	/^function fuf#quickfix#createHandler(base)$/;"	f
fuf#quickfix#getSwitchOrder	vim/autoload/fuf/quickfix.vim	/^function fuf#quickfix#getSwitchOrder()$/;"	f
fuf#quickfix#onInit	vim/autoload/fuf/quickfix.vim	/^function fuf#quickfix#onInit()$/;"	f
fuf#quickfix#renewCache	vim/autoload/fuf/quickfix.vim	/^function fuf#quickfix#renewCache()$/;"	f
fuf#quickfix#requiresOnCommandPre	vim/autoload/fuf/quickfix.vim	/^function fuf#quickfix#requiresOnCommandPre()$/;"	f
fuf#saveInfoFile	vim/autoload/fuf.vim	/^function fuf#saveInfoFile(modeName, info)$/;"	f
fuf#setAbbrWithFormattedWord	vim/autoload/fuf.vim	/^function fuf#setAbbrWithFormattedWord(item, abbrIndex)$/;"	f
fuf#splitPath	vim/autoload/fuf.vim	/^function fuf#splitPath(path)$/;"	f
fuf#suffixNumber	vim/autoload/fuf.vim	/^function fuf#suffixNumber(str)$/;"	f
fuf#tag#createHandler	vim/autoload/fuf/tag.vim	/^function fuf#tag#createHandler(base)$/;"	f
fuf#tag#getSwitchOrder	vim/autoload/fuf/tag.vim	/^function fuf#tag#getSwitchOrder()$/;"	f
fuf#tag#onInit	vim/autoload/fuf/tag.vim	/^function fuf#tag#onInit()$/;"	f
fuf#tag#renewCache	vim/autoload/fuf/tag.vim	/^function fuf#tag#renewCache()$/;"	f
fuf#tag#requiresOnCommandPre	vim/autoload/fuf/tag.vim	/^function fuf#tag#requiresOnCommandPre()$/;"	f
fuf#taggedfile#createHandler	vim/autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#createHandler(base)$/;"	f
fuf#taggedfile#getSwitchOrder	vim/autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#getSwitchOrder()$/;"	f
fuf#taggedfile#onInit	vim/autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#onInit()$/;"	f
fuf#taggedfile#renewCache	vim/autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#renewCache()$/;"	f
fuf#taggedfile#requiresOnCommandPre	vim/autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#requiresOnCommandPre()$/;"	f
fuf#unique	vim/autoload/fuf.vim	/^function fuf#unique(items)$/;"	f
fuf#updateMruList	vim/autoload/fuf.vim	/^function fuf#updateMruList(mrulist, newItem, maxItem, exclude)$/;"	f
function	vim/autoload/rails.vim	/^function! s:function(name)$/;"	f
function	vim/plugin/rails.vim	/^function! s:function(name)$/;"	f
functionaltestEdit	vim/autoload/rails.vim	/^function! s:functionaltestEdit(cmd,...)$/;"	f
functionaltestList	vim/autoload/rails.vim	/^function! s:functionaltestList(A,L,P)$/;"	f
fuzzyglob	vim/autoload/rails.vim	/^function! s:fuzzyglob(arg)$/;"	f
g:Align_xstrlen	vim/autoload/Align.vim	/^  let g:Align_xstrlen= 0$/;"	v
g:Align_xstrlen	vim/autoload/Align.vim	/^  let g:Align_xstrlen= 1$/;"	v
g:DrChipTopLvlMenu	vim/autoload/RltvNmbr.vim	/^ let g:DrChipTopLvlMenu= "DrChip."$/;"	v
g:DrChipTopLvlMenu	vim/plugin/AlignMapsPlugin.vim	/^  let g:DrChipTopLvlMenu= "DrChip."$/;"	v
g:DrChipTopLvlMenu	vim/plugin/RltvNmbr.vim	/^ let g:DrChipTopLvlMenu= "DrChip."$/;"	v
g:DrChipTopLvlMenu	vim/plugin/RltvNmbrPlugin.vim	/^  let g:DrChipTopLvlMenu= "DrChip."$/;"	v
g:GetLatestVimScripts_allowautoinstall	vim/autoload/getscript.vim	/^ let g:GetLatestVimScripts_allowautoinstall= 1$/;"	v
g:GetLatestVimScripts_mv	vim/autoload/getscript.vim	/^   let g:GetLatestVimScripts_mv= "mv"$/;"	v
g:GetLatestVimScripts_mv	vim/autoload/getscript.vim	/^   let g:GetLatestVimScripts_mv= "ren"$/;"	v
g:GetLatestVimScripts_options	vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_options = ""$/;"	v
g:GetLatestVimScripts_options	vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= ""$/;"	v
g:GetLatestVimScripts_options	vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= "-q -O"$/;"	v
g:GetLatestVimScripts_options	vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_options= "-s -O"$/;"	v
g:GetLatestVimScripts_wget	vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget    = 'echo "GetLatestVimScripts needs wget or curl"'$/;"	v
g:GetLatestVimScripts_wget	vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget= "curl"$/;"	v
g:GetLatestVimScripts_wget	vim/autoload/getscript.vim	/^  let g:GetLatestVimScripts_wget= "wget"$/;"	v
g:NERDTreeIgnore	vim/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeSortOrder	vim/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:ackprg	vim/plugin/ack.vim	/^let g:ackprg="ack\\\\ -H\\\\ --nocolor\\\\ --nogroup"$/;"	v
g:autoloaded_rails	vim/autoload/rails.vim	/^let g:autoloaded_rails = '4.2'$/;"	v
g:colors_name	vim/colors/ego.vim	/^let g:colors_name = "ego"$/;"	v
g:colors_name	vim/colors/oceanblack.vim	/^let g:colors_name = "oceanblack"$/;"	v
g:command_t_loaded	vim/plugin/command-t.vim	/^let g:command_t_loaded = 1$/;"	v
g:cucumber_langauges	vim/syntax/cucumber.vim	/^let g:cucumber_langauges = {$/;"	v
g:did_ft	vim/plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:did_ruby_ftplugin_functions	vim/ftplugin/ruby.vim	/^let g:did_ruby_ftplugin_functions = 1$/;"	v
g:eruby_default_subtype	vim/ftplugin/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:eruby_default_subtype	vim/syntax/eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:getscript_cygwin	vim/autoload/getscript.vim	/^   let g:getscript_cygwin= 0$/;"	v
g:getscript_cygwin	vim/autoload/getscript.vim	/^   let g:getscript_cygwin= 1$/;"	v
g:getscript_cygwin	vim/autoload/getscript.vim	/^  let g:getscript_cygwin= 0$/;"	v
g:getscript_shq	vim/autoload/getscript.vim	/^   let g:getscript_shq= "'"$/;"	v
g:getscript_shq	vim/autoload/getscript.vim	/^   let g:getscript_shq= '"'$/;"	v
g:getscript_shq	vim/autoload/getscript.vim	/^  let g:getscript_shq= "'"$/;"	v
g:getscript_shq	vim/autoload/getscript.vim	/^  let g:getscript_shq= &shq$/;"	v
g:getscript_shq	vim/autoload/getscript.vim	/^  let g:getscript_shq= &sxq$/;"	v
g:getscript_shq	vim/autoload/getscript.vim	/^ let g:getscript_shq= g:netrw_shq$/;"	v
g:gist_browser_command	vim/plugin/gist.vim	/^    let g:gist_browser_command = "!start rundll32 url.dll,FileProtocolHandler %URL%"$/;"	v
g:gist_browser_command	vim/plugin/gist.vim	/^    let g:gist_browser_command = "firefox %URL% &"$/;"	v
g:gist_browser_command	vim/plugin/gist.vim	/^    let g:gist_browser_command = "open %URL%"$/;"	v
g:gist_browser_command	vim/plugin/gist.vim	/^    let g:gist_browser_command = "xdg-open %URL%"$/;"	v
g:gist_detect_filetype	vim/plugin/gist.vim	/^  let g:gist_detect_filetype = 0$/;"	v
g:gist_open_browser_after_post	vim/plugin/gist.vim	/^  let g:gist_open_browser_after_post = 0$/;"	v
g:gist_put_url_to_clipboard_after_post	vim/plugin/gist.vim	/^  let g:gist_put_url_to_clipboard_after_post = 1$/;"	v
g:gist_show_privates	vim/plugin/gist.vim	/^  let g:gist_show_privates = 0$/;"	v
g:loaded_Align	vim/autoload/Align.vim	/^let g:loaded_Align = "v35"$/;"	v
g:loaded_AlignMaps	vim/autoload/AlignMaps.vim	/^let g:loaded_AlignMaps= "v41"$/;"	v
g:loaded_AlignMapsPlugin	vim/plugin/AlignMapsPlugin.vim	/^let g:loaded_AlignMapsPlugin = "v41"$/;"	v
g:loaded_AlignPlugin	vim/plugin/AlignPlugin.vim	/^let g:loaded_AlignPlugin = "v35"$/;"	v
g:loaded_AutoClose	vim/plugin/autoclose.vim	/^let g:loaded_AutoClose = 1$/;"	v
g:loaded_RltvNmbr	vim/autoload/RltvNmbr.vim	/^let g:loaded_RltvNmbr = "v3"$/;"	v
g:loaded_RltvNmbr	vim/plugin/RltvNmbr.vim	/^let g:loaded_RltvNmbr = "v3"$/;"	v
g:loaded_RltvNmbrPlugin	vim/plugin/RltvNmbrPlugin.vim	/^let g:loaded_RltvNmbrPlugin = "v3"$/;"	v
g:loaded_autoload_fuf	vim/autoload/fuf.vim	/^let g:loaded_autoload_fuf = 1$/;"	v
g:loaded_autoload_fuf_bookmark	vim/autoload/fuf/bookmark.vim	/^let g:loaded_autoload_fuf_bookmark = 1$/;"	v
g:loaded_autoload_fuf_buffer	vim/autoload/fuf/buffer.vim	/^let g:loaded_autoload_fuf_buffer = 1$/;"	v
g:loaded_autoload_fuf_callbackfile	vim/autoload/fuf/callbackfile.vim	/^let g:loaded_autoload_fuf_callbackfile = 1$/;"	v
g:loaded_autoload_fuf_callbackitem	vim/autoload/fuf/callbackitem.vim	/^let g:loaded_autoload_fuf_callbackitem = 1$/;"	v
g:loaded_autoload_fuf_changelist	vim/autoload/fuf/changelist.vim	/^let g:loaded_autoload_fuf_changelist = 1$/;"	v
g:loaded_autoload_fuf_dir	vim/autoload/fuf/dir.vim	/^let g:loaded_autoload_fuf_dir = 1$/;"	v
g:loaded_autoload_fuf_file	vim/autoload/fuf/file.vim	/^let g:loaded_autoload_fuf_file = 1$/;"	v
g:loaded_autoload_fuf_givencmd	vim/autoload/fuf/givencmd.vim	/^let g:loaded_autoload_fuf_givencmd = 1$/;"	v
g:loaded_autoload_fuf_givendir	vim/autoload/fuf/givendir.vim	/^let g:loaded_autoload_fuf_givendir = 1$/;"	v
g:loaded_autoload_fuf_givenfile	vim/autoload/fuf/givenfile.vim	/^let g:loaded_autoload_fuf_givenfile = 1$/;"	v
g:loaded_autoload_fuf_help	vim/autoload/fuf/help.vim	/^let g:loaded_autoload_fuf_help = 1$/;"	v
g:loaded_autoload_fuf_jumplist	vim/autoload/fuf/jumplist.vim	/^let g:loaded_autoload_fuf_jumplist = 1$/;"	v
g:loaded_autoload_fuf_line	vim/autoload/fuf/line.vim	/^let g:loaded_autoload_fuf_line = 1$/;"	v
g:loaded_autoload_fuf_mrucmd	vim/autoload/fuf/mrucmd.vim	/^let g:loaded_autoload_fuf_mrucmd = 1$/;"	v
g:loaded_autoload_fuf_mrufile	vim/autoload/fuf/mrufile.vim	/^let g:loaded_autoload_fuf_mrufile = 1$/;"	v
g:loaded_autoload_fuf_quickfix	vim/autoload/fuf/quickfix.vim	/^let g:loaded_autoload_fuf_quickfix = 1$/;"	v
g:loaded_autoload_fuf_tag	vim/autoload/fuf/tag.vim	/^let g:loaded_autoload_fuf_tag = 1$/;"	v
g:loaded_autoload_fuf_taggedfile	vim/autoload/fuf/taggedfile.vim	/^let g:loaded_autoload_fuf_taggedfile = 1$/;"	v
g:loaded_cecutil	vim/plugin/cecutil.vim	/^let g:loaded_cecutil = "v18b"$/;"	v
g:loaded_endwise	vim/plugin/endwise.vim	/^let g:loaded_endwise = 1$/;"	v
g:loaded_fuf	vim/plugin/fuf.vim	/^let g:loaded_fuf = 1$/;"	v
g:loaded_getscript	vim/autoload/getscript.vim	/^let g:loaded_getscript= "v29"$/;"	v
g:loaded_getscriptPlugin	vim/plugin/getscriptPlugin.vim	/^let g:loaded_getscriptPlugin = "v29"$/;"	v
g:loaded_gist_vim	vim/plugin/gist.vim	/^let g:loaded_gist_vim = 1$/;"	v
g:loaded_rails	vim/plugin/rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_surround	vim/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_vimball	vim/autoload/vimball.vim	/^let g:loaded_vimball = "v26"$/;"	v
g:loaded_vimballPlugin	vim/plugin/vimballPlugin.vim	/^let g:loaded_vimballPlugin = "v26"$/;"	v
g:netrw_cygwin	vim/autoload/vimball.vim	/^    let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	vim/autoload/vimball.vim	/^    let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	vim/autoload/vimball.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:netrw_shq	vim/autoload/vimball.vim	/^    let g:netrw_shq= "'"$/;"	v
g:netrw_shq	vim/autoload/vimball.vim	/^    let g:netrw_shq= '"'$/;"	v
g:netrw_shq	vim/autoload/vimball.vim	/^   let g:netrw_shq= "'"$/;"	v
g:netrw_shq	vim/autoload/vimball.vim	/^   let g:netrw_shq= &shq$/;"	v
g:netrw_shq	vim/autoload/vimball.vim	/^  let g:netrw_shq= g:vimball_shq$/;"	v
g:rubycomplete_classes_in_global	vim/autoload/rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_include_object	vim/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	vim/autoload/rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
g:rubycomplete_rails	vim/autoload/rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g:s	vim/autoload/fuf.vim	/^let g:s = ""$/;"	v
g:snip_elem_delim	vim/plugin/snippetsEmu.vim	/^    let g:snip_elem_delim = ":"$/;"	v
g:snip_end_tag	vim/plugin/snippetsEmu.vim	/^    let g:snip_end_tag = "}>"$/;"	v
g:snip_start_tag	vim/plugin/snippetsEmu.vim	/^    let g:snip_start_tag = "<{"$/;"	v
g:snippetsEmu_key	vim/plugin/snippetsEmu.vim	/^  let g:snippetsEmu_key = "<Tab>"$/;"	v
g:vimball_mkdir	vim/autoload/vimball.vim	/^   let g:vimball_mkdir= "makedir"$/;"	v
g:vimball_mkdir	vim/autoload/vimball.vim	/^   let g:vimball_mkdir= "mkdir"$/;"	v
g:vimball_mkdir	vim/autoload/vimball.vim	/^   let g:vimball_mkdir= g:netrw_local_mkdir$/;"	v
g:vimball_path_escape	vim/autoload/vimball.vim	/^  let g:vimball_path_escape= ' ;#%'$/;"	v
g:x	vim/ftplugin/objc_cocoa_mappings.vim	/^let g:x = b:cocoa_proj$/;"	v
generate_syntax_file	vim/lib/extras/build_syntaxfile.py	/^def generate_syntax_file():$/;"	f
generate_tasks	capistrano_completion	/^  def generate_tasks$/;"	f	class:CapistranoCompletion
getBufIndicator	vim/autoload/fuf/buffer.vim	/^function s:getBufIndicator(bufNr)$/;"	f
getChangesLines	vim/autoload/fuf/changelist.vim	/^function s:getChangesLines()$/;"	f
getCurrentHelpTagFiles	vim/autoload/fuf/help.vim	/^function s:getCurrentHelpTagFiles()$/;"	f
getHelpTagEntries	vim/autoload/fuf/help.vim	/^function s:getHelpTagEntries(tagFile)$/;"	f
getJumpsLines	vim/autoload/fuf/jumplist.vim	/^function s:getJumpsLines()$/;"	f
getJumpsLines	vim/autoload/fuf/quickfix.vim	/^function s:getJumpsLines()$/;"	f
getLinePattern	vim/autoload/fuf/bookmark.vim	/^function s:getLinePattern(lnum)$/;"	f
getMatchingIndex	vim/autoload/fuf/help.vim	/^function s:getMatchingIndex(lines, pattern)$/;"	f
getMatchingIndex	vim/autoload/fuf/tag.vim	/^function s:getMatchingIndex(lines, cmd)$/;"	f
getMatchingLineNumber	vim/autoload/fuf/bookmark.vim	/^function s:getMatchingLineNumber(lines, pattern, lnumBegin)$/;"	f
getPath	vim/plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getSelectedBookmark	vim/plugin/NERD_tree.vim	/^function! s:getSelectedBookmark()$/;"	f
getSelectedText	vim/autoload/fuf/bookmark.vim	/^function s:getSelectedText()$/;"	f
getSnippedHead	vim/autoload/fuf.vim	/^function s:getSnippedHead(head, baseLen)$/;"	f
getTagNames	vim/autoload/fuf/tag.vim	/^function s:getTagNames(tagFile)$/;"	f
getTaggedFileList	vim/autoload/fuf/taggedfile.vim	/^function s:getTaggedFileList(tagfile)$/;"	f
getTreeWinNum	vim/plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
getWordBoundaries	vim/autoload/fuf.vim	/^function s:getWordBoundaries(word)$/;"	f
get_bool	vim/ruby/command-t/controller.rb	/^    def get_bool name$/;"	f	class:CommandT.Controller
get_bool	vim/ruby/command-t/settings.rb	/^    def get_bool setting$/;"	f	class:CommandT.Settings
get_classes	vim/lib/extras/build_syntaxfile.py	/^def get_classes(header_files):$/;"	f
get_classes	vim/lib/extras/cocoa_classes.py	/^def get_classes(header_files_and_frameworks):$/;"	f
get_constants	vim/lib/extras/cocoa_definitions.py	/^def get_constants(header_files):$/;"	f
get_cursor_highlight	vim/ruby/command-t/match_window.rb	/^    def get_cursor_highlight$/;"	f	class:CommandT.MatchWindow
get_functions	vim/lib/extras/cocoa_definitions.py	/^def get_functions(header_files):$/;"	f
get_method_name	vim/lib/extras/cocoa_methods.py	/^def get_method_name(line):$/;"	f
get_methods	vim/lib/extras/cocoa_methods.py	/^def get_methods(headers):$/;"	f
get_notifications	vim/lib/extras/cocoa_definitions.py	/^def get_notifications(header_files):$/;"	f
get_number	vim/ruby/command-t/controller.rb	/^    def get_number name$/;"	f	class:CommandT.Controller
get_number	vim/ruby/command-t/settings.rb	/^    def get_number setting$/;"	f	class:CommandT.Settings
get_protocol_classes	vim/lib/extras/build_syntaxfile.py	/^def get_protocol_classes(header_files):$/;"	f
get_string	vim/ruby/command-t/controller.rb	/^    def get_string name$/;"	f	class:CommandT.Controller
get_superclasses	vim/lib/extras/cocoa_classes.py	/^def get_superclasses(classes_and_frameworks):$/;"	f
get_types	vim/lib/extras/cocoa_definitions.py	/^def get_types(header_files):$/;"	f
getchar	vim/plugin/surround.vim	/^function! s:getchar()$/;"	f
getopt	vim/autoload/rails.vim	/^function! s:getopt(opt,...)$/;"	f
getoutput	vim/lib/extras/cocoa_classes.py	/^from commands import getoutput$/;"	i
getpidfor	vim/autoload/rails.vim	/^function! s:getpidfor(bind,port)$/;"	f
getscript#GetLatestVimScripts	vim/autoload/getscript.vim	/^fun! getscript#GetLatestVimScripts()$/;"	f
gsub	vim/autoload/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gsub	vim/plugin/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gzip	vim/lib/extras/cocoa_methods.py	/^import re, os, gzip$/;"	i
handleMiddleMouse	vim/plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
handle_key	vim/ruby/command-t/controller.rb	/^    def handle_key$/;"	f	class:CommandT.Controller
handler.getCompleteItems	vim/autoload/fuf/bookmark.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/buffer.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/callbackfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/callbackitem.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/changelist.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/dir.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/file.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/givencmd.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/givendir.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/givenfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/help.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/jumplist.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/line.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/mrucmd.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/mrufile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/quickfix.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/tag.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	vim/autoload/fuf/taggedfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getModeName	vim/autoload/fuf/bookmark.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/buffer.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/callbackfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/callbackitem.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/changelist.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/dir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/file.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/givencmd.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/givendir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/givenfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/help.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/jumplist.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/line.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/mrucmd.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/mrufile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/quickfix.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/tag.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	vim/autoload/fuf/taggedfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/bookmark.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/buffer.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/callbackfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/callbackitem.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/changelist.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/dir.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/file.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/givencmd.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/givendir.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/givenfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/help.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/jumplist.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/line.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/mrucmd.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/mrufile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/quickfix.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/tag.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	vim/autoload/fuf/taggedfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPrompt	vim/autoload/fuf/bookmark.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/buffer.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/callbackfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/callbackitem.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/changelist.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/dir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/file.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/givencmd.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/givendir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/givenfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/help.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/jumplist.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/line.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/mrucmd.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/mrufile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/quickfix.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/tag.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	vim/autoload/fuf/taggedfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.makePatternSet	vim/autoload/fuf/bookmark.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/buffer.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/callbackfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/callbackitem.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/changelist.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/dir.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/file.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/givencmd.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/givendir.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/givenfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/help.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/jumplist.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/line.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/mrucmd.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/mrufile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/quickfix.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/tag.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	vim/autoload/fuf/taggedfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/bookmark.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/buffer.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/callbackfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/callbackitem.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/changelist.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/dir.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/file.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/givencmd.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/givendir.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/givenfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/help.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/jumplist.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/line.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/mrucmd.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/mrufile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/quickfix.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/tag.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	vim/autoload/fuf/taggedfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/bookmark.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/buffer.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/callbackfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/callbackitem.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/changelist.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/dir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/file.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/givencmd.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/givendir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/givenfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/help.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/jumplist.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/line.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/mrucmd.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/mrufile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/quickfix.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/tag.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	vim/autoload/fuf/taggedfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/bookmark.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/buffer.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/callbackfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/callbackitem.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/changelist.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/dir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/file.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/givencmd.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/givendir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/givenfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/help.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/jumplist.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/line.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/mrucmd.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/mrufile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/quickfix.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/tag.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	vim/autoload/fuf/taggedfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/bookmark.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/buffer.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/callbackfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/callbackitem.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/changelist.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/dir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/file.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/givencmd.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/givendir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/givenfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/help.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/jumplist.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/line.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/mrucmd.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/mrufile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/quickfix.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/tag.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	vim/autoload/fuf/taggedfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onOpen	vim/autoload/fuf/bookmark.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/buffer.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/callbackfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/callbackitem.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/changelist.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/dir.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/file.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/givencmd.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/givendir.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/givenfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/help.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/jumplist.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/line.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/mrucmd.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/mrufile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/quickfix.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/tag.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	vim/autoload/fuf/taggedfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.targetsPath	vim/autoload/fuf/bookmark.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/buffer.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/callbackfile.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/callbackitem.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/changelist.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/dir.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/file.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/givencmd.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/givendir.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/givenfile.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/help.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/jumplist.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/line.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/mrucmd.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/mrufile.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/quickfix.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/tag.vim	/^function s:handler.targetsPath()$/;"	f
handler.targetsPath	vim/autoload/fuf/taggedfile.vim	/^function s:handler.targetsPath()$/;"	f
handlerBase.addStat	vim/autoload/fuf.vim	/^function s:handlerBase.addStat(pattern, word)$/;"	f
handlerBase.concretize	vim/autoload/fuf.vim	/^function s:handlerBase.concretize(deriv)$/;"	f
handlerBase.existsPrompt	vim/autoload/fuf.vim	/^function s:handlerBase.existsPrompt(line)$/;"	f
handlerBase.getMatchingCompleteItems	vim/autoload/fuf.vim	/^function s:handlerBase.getMatchingCompleteItems(patternBase)$/;"	f
handlerBase.onBs	vim/autoload/fuf.vim	/^function s:handlerBase.onBs()$/;"	f
handlerBase.onComplete	vim/autoload/fuf.vim	/^function s:handlerBase.onComplete(findstart, base)$/;"	f
handlerBase.onCr	vim/autoload/fuf.vim	/^function s:handlerBase.onCr(openType, fCheckDir)$/;"	f
handlerBase.onCursorMovedI	vim/autoload/fuf.vim	/^function s:handlerBase.onCursorMovedI()$/;"	f
handlerBase.onInsertLeave	vim/autoload/fuf.vim	/^function s:handlerBase.onInsertLeave()$/;"	f
handlerBase.onPreviewBase	vim/autoload/fuf.vim	/^function s:handlerBase.onPreviewBase()$/;"	f
handlerBase.onRecallPattern	vim/autoload/fuf.vim	/^function s:handlerBase.onRecallPattern(shift)$/;"	f
handlerBase.onSwitchMatching	vim/autoload/fuf.vim	/^function s:handlerBase.onSwitchMatching()$/;"	f
handlerBase.onSwitchMode	vim/autoload/fuf.vim	/^function s:handlerBase.onSwitchMode(shift)$/;"	f
handlerBase.removePrompt	vim/autoload/fuf.vim	/^function s:handlerBase.removePrompt(line)$/;"	f
handlerBase.restorePrompt	vim/autoload/fuf.vim	/^function s:handlerBase.restorePrompt(line)$/;"	f
has_syntax	vim/ruby/vim.rb	/^  def self.has_syntax?$/;"	F	class:VIM
hdrdir	vim/ruby/command-t/Makefile	/^hdrdir = $(topdir)$/;"	m
helperEdit	vim/autoload/rails.vim	/^function! s:helperEdit(cmd,...)$/;"	f
helperList	vim/autoload/rails.vim	/^function! s:helperList(A,L,P)$/;"	f
helpermethods	vim/autoload/rails.vim	/^function! s:helpermethods()$/;"	f
hide	vim/ruby/command-t/controller.rb	/^    def hide$/;"	f	class:CommandT.Controller
hide_cursor	vim/ruby/command-t/match_window.rb	/^    def hide_cursor$/;"	f	class:CommandT.MatchWindow
hide_log	railsrc	/^def hide_log$/;"	f
highlightError	vim/autoload/fuf.vim	/^function s:highlightError()$/;"	f
highlightPrompt	vim/autoload/fuf.vim	/^function s:highlightPrompt(prompt)$/;"	f
htmldir	vim/ruby/command-t/Makefile	/^htmldir = $(docdir)$/;"	m
includedir	vim/ruby/command-t/Makefile	/^includedir = $(prefix)\/include$/;"	m
indentLevelFor	vim/plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
infodir	vim/ruby/command-t/Makefile	/^infodir = $(datarootdir)\/info$/;"	m
initMisc	vim/plugin/fuf.vim	/^function s:initMisc()$/;"	f
initNerdTree	vim/plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	vim/plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	vim/plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initOpenURL	vim/autoload/rails.vim	/^function! s:initOpenURL()$/;"	f
initVariable	vim/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
initialize	capistrano_completion	/^  def initialize(command)$/;"	f	class:CapistranoCompletion
initialize	vim/plugin/fuf.vim	/^function s:initialize()$/;"	f
initialize	vim/ruby/command-t/controller.rb	/^    def initialize$/;"	f	class:CommandT.Controller
initialize	vim/ruby/command-t/finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.Finder
initialize	vim/ruby/command-t/match_window.rb	/^    def initialize options = {}$/;"	f	class:CommandT.MatchWindow
initialize	vim/ruby/command-t/prompt.rb	/^    def initialize$/;"	f	class:CommandT.Prompt
initialize	vim/ruby/command-t/scanner.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.Scanner
initialize	vim/ruby/command-t/settings.rb	/^    def initialize$/;"	f	class:CommandT.Settings
initializerEdit	vim/autoload/rails.vim	/^function! s:initializerEdit(cmd,...)$/;"	f
initializerList	vim/autoload/rails.vim	/^function! s:initializerList(A,L,P)$/;"	f
inputreplacement	vim/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	vim/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
insert	vim/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
insertNewNode	vim/plugin/NERD_tree.vim	/^function! s:insertNewNode()$/;"	f
integrationtestEdit	vim/autoload/rails.vim	/^function! s:integrationtestEdit(cmd,...)$/;"	f
integrationtestList	vim/autoload/rails.vim	/^function! s:integrationtestList(A,L,P)$/;"	f
interpretPrimaryPatternForNonPath	vim/autoload/fuf.vim	/^function s:interpretPrimaryPatternForNonPath(pattern)$/;"	f
interpretPrimaryPatternForPath	vim/autoload/fuf.vim	/^function s:interpretPrimaryPatternForPath(pattern)$/;"	f
interpretPrimaryPatternForPathTail	vim/autoload/fuf.vim	/^function s:interpretPrimaryPatternForPathTail(pattern)$/;"	f
invertrange	vim/autoload/rails.vim	/^function! s:invertrange(beg,end)$/;"	f
isTreeOpen	vim/plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	vim/plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
javascriptEdit	vim/autoload/rails.vim	/^function! s:javascriptEdit(cmd,...)$/;"	f
javascriptList	vim/autoload/rails.vim	/^function! s:javascriptList(A,L,P)$/;"	f
join_lines	vim/lib/extras/build_syntaxfile.py	/^def join_lines(lines):$/;"	f
jumpToBookmark	vim/autoload/fuf/bookmark.vim	/^function s:jumpToBookmark(path, mode, pattern, lnum)$/;"	f
jumpToChild	vim/plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	vim/plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	vim/plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	vim/plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	vim/plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	vim/plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
lastformat	vim/autoload/rails.vim	/^function! s:lastformat(start)$/;"	f
lastmethod	vim/autoload/rails.vim	/^function! s:lastmethod(...)$/;"	f
lastmethodline	vim/autoload/rails.vim	/^function! s:lastmethodline(start)$/;"	f
lastopeningline	vim/autoload/rails.vim	/^function! s:lastopeningline(pattern,limit,start)$/;"	f
layoutEdit	vim/autoload/rails.vim	/^function! s:layoutEdit(cmd,...)$/;"	f
layoutList	vim/autoload/rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
ldflags	vim/ruby/command-t/Makefile	/^ldflags  = -L. $/;"	m
libEdit	vim/autoload/rails.vim	/^function! s:libEdit(cmd,...)$/;"	f
libList	vim/autoload/rails.vim	/^function! s:libList(A,L,P)$/;"	f
libdir	vim/ruby/command-t/Makefile	/^libdir = $(exec_prefix)\/lib$/;"	m
libexecdir	vim/ruby/command-t/Makefile	/^libexecdir = $(exec_prefix)\/libexec$/;"	m
libpath	vim/ruby/command-t/Makefile	/^libpath = . $(libdir)$/;"	m
linepeak	vim/autoload/rails.vim	/^function! s:linepeak()$/;"	f
lines	vim/ruby/vim/screen.rb	/^    def self.lines$/;"	F	class:VIM.Screen
list_matches	vim/ruby/command-t/controller.rb	/^    def list_matches$/;"	f	class:CommandT.Controller
list_methods	irbrc	/^  def list_methods$/;"	f	class:Object
loaded_nerd_tree	vim/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_snippet	vim/plugin/snippetsEmu.vim	/^let loaded_snippet=1$/;"	v
loaded_snips	vim/plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_taglist	vim/plugin/taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	vim/plugin/taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	vim/plugin/taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	vim/plugin/taglist.vim	/^let loaded_taglist = 'available'$/;"	v
local_methods	irbrc	/^  def local_methods$/;"	f	class:Object
local_methods	irbrc	/^  def local_methods(obj = self)$/;"	f	class:Object
localeEdit	vim/autoload/rails.vim	/^function! s:localeEdit(cmd,...)$/;"	f
localeList	vim/autoload/rails.vim	/^function! s:localeList(A,L,P)$/;"	f
localedir	vim/ruby/command-t/Makefile	/^localedir = $(datarootdir)\/locale$/;"	m
localstatedir	vim/ruby/command-t/Makefile	/^localstatedir = $(prefix)\/var$/;"	m
locations	vim/autoload/objc/man.vim	/^let locations = [$/;"	v
lock	vim/ruby/command-t/match_window.rb	/^    def lock$/;"	f	class:CommandT.MatchWindow
mCommandT	vim/ruby/command-t/ext.c	/^VALUE mCommandT         = 0; \/\/ module CommandT$/;"	v
mailerEdit	vim/autoload/rails.vim	/^function! s:mailerEdit(cmd,...)$/;"	f
mailerList	vim/autoload/rails.vim	/^function! s:mailerList(A,L,P)$/;"	f
main_syntax	vim/syntax/eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
main_syntax	vim/syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	vim/syntax/json.vim	/^  let main_syntax = 'json'$/;"	v
makeAdditionalMigemoPattern	vim/autoload/fuf.vim	/^function s:makeAdditionalMigemoPattern(pattern)$/;"	f
makeFileAbbrInfo	vim/autoload/fuf.vim	/^function s:makeFileAbbrInfo(item, maxLenStats)$/;"	f
makeFuzzyMatchingExpr	vim/autoload/fuf.vim	/^function s:makeFuzzyMatchingExpr(target, pattern)$/;"	f
makeItem	vim/autoload/fuf/buffer.vim	/^function s:makeItem(nr)$/;"	f
makeItem	vim/autoload/fuf/changelist.vim	/^function s:makeItem(line)$/;"	f
makeItem	vim/autoload/fuf/jumplist.vim	/^function s:makeItem(line, bufnrPrev)$/;"	f
makeItem	vim/autoload/fuf/quickfix.vim	/^function s:makeItem(qfItem)$/;"	f
makePartialMatchingExpr	vim/autoload/fuf.vim	/^function s:makePartialMatchingExpr(target, pattern)$/;"	f
makeRefiningExpr	vim/autoload/fuf.vim	/^function s:makeRefiningExpr(pattern)$/;"	f
makewithruby	vim/autoload/rails.vim	/^function! s:makewithruby(arg,bang,...)$/;"	f
mandir	vim/ruby/command-t/Makefile	/^mandir = $(datarootdir)\/man$/;"	m
map	vim/ruby/command-t/controller.rb	/^    def map key, function, param = nil$/;"	f	class:CommandT.Controller
match_limit	vim/ruby/command-t/controller.rb	/^    def match_limit$/;"	f	class:CommandT.Controller
match_output	vim/lib/extras/cocoa_definitions.py	/^def match_output(command, regex, group_num):$/;"	f
match_text_for_idx	vim/ruby/command-t/match_window.rb	/^    def match_text_for_idx idx$/;"	f	class:CommandT.MatchWindow
match_type	vim/autoload/rails.vim	/^function! s:match_type(type,...)$/;"	f
matchcursor	vim/autoload/rails.vim	/^function! s:matchcursor(pat)$/;"	f
matches	capistrano_completion	/^  def matches$/;"	f	class:CapistranoCompletion
matches=	vim/ruby/command-t/match_window.rb	/^    def matches= matches$/;"	f	class:CommandT.MatchWindow
matching_tasks	capistrano_completion	/^  def matching_tasks$/;"	f	class:CapistranoCompletion
menuBufEnter	vim/plugin/rails.vim	/^function! s:menuBufEnter()$/;"	f
menuBufLeave	vim/plugin/rails.vim	/^function! s:menuBufLeave()$/;"	f
menucmd	vim/plugin/rails.vim	/^function! s:menucmd(priority)$/;"	f
menuprompt	vim/plugin/rails.vim	/^function! s:menuprompt(vimcmd,prompt)$/;"	f
metalEdit	vim/autoload/rails.vim	/^function! s:metalEdit(cmd,...)$/;"	f
metalList	vim/autoload/rails.vim	/^function! s:metalList(A,L,P)$/;"	f
method_missing	railsrc	/^def method_missing msg, *args, &block$/;"	f
mextargs	vim/autoload/rails.vim	/^function! s:mextargs(str,num)$/;"	f
migrationEdit	vim/autoload/rails.vim	/^function! s:migrationEdit(cmd,...)$/;"	f
migrationList	vim/autoload/rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
migspc	vim/autoload/rails.vim	/^function! s:migspc(line)$/;"	f
missing	vim/ruby/command-t/extconf.rb	/^def missing item$/;"	f
mkeep	vim/autoload/rails.vim	/^function! s:mkeep(str)$/;"	f
model	vim/autoload/rails.vim	/^function! s:model(...)$/;"	f
modelEdit	vim/autoload/rails.vim	/^function! s:modelEdit(cmd,...)$/;"	f
modelList	vim/autoload/rails.vim	/^function! s:modelList(A,L,P)$/;"	f
moveToOtherTabPageOpeningBuffer	vim/autoload/fuf.vim	/^function s:moveToOtherTabPageOpeningBuffer(bufNr)$/;"	f
moveToWindowOfBufferInCurrentTabPage	vim/autoload/fuf.vim	/^function s:moveToWindowOfBufferInCurrentTabPage(bufNr)$/;"	f
moveToWindowOfBufferInOtherTabPage	vim/autoload/fuf.vim	/^function s:moveToWindowOfBufferInOtherTabPage(bufNr)$/;"	f
mysearchpair	vim/plugin/endwise.vim	/^function! s:mysearchpair(beginpat,endpat,synpat)$/;"	f
nextBufferName	vim/plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
non_class_methods	irbrc	/^  def non_class_methods$/;"	f	class:Object
nr2hex	vim/plugin/gist.vim	/^function! s:nr2hex(nr)$/;"	f
objc#cocoacomplete#Complete	vim/autoload/objc/cocoacomplete.vim	/^fun! objc#cocoacomplete#Complete(findstart, base)$/;"	f
objc#man#Completion	vim/autoload/objc/man.vim	/^fun objc#man#Completion(ArgLead, CmdLine, CursorPos)$/;"	f
objc#man#ShowDoc	vim/autoload/objc/man.vim	/^fun objc#man#ShowDoc(...)$/;"	f
objc#method_builder#Build	vim/autoload/objc/method_builder.vim	/^fun objc#method_builder#Build(header)$/;"	f
objc#method_builder#Completion	vim/autoload/objc/method_builder.vim	/^fun objc#method_builder#Completion(ArgLead, CmdLine, CursorPos)$/;"	f
objc#method_list#Activate	vim/autoload/objc/method_list.vim	/^fun objc#method_list#Activate(update)$/;"	f
objc#pum_snippet#Map	vim/autoload/objc/pum_snippet.vim	/^fun! objc#pum_snippet#Map()$/;"	f
objc#pum_snippet#Trigger	vim/autoload/objc/pum_snippet.vim	/^fun! objc#pum_snippet#Trigger(key)$/;"	f
objc#pum_snippet#Unmap	vim/autoload/objc/pum_snippet.vim	/^fun! objc#pum_snippet#Unmap()$/;"	f
objc_man_key	vim/ftplugin/objc_cocoa_mappings.vim	/^let objc_man_key = exists('objc_man_key') ? objc_man_key : 'K'$/;"	v
observerEdit	vim/autoload/rails.vim	/^function! s:observerEdit(cmd,...)$/;"	f
observerList	vim/autoload/rails.vim	/^function! s:observerList(A,L,P)$/;"	f
oldincludedir	vim/ruby/command-t/Makefile	/^oldincludedir = $(DESTDIR)\/usr\/include$/;"	m
onBufEnter	vim/plugin/fuf.vim	/^function s:onBufEnter()$/;"	f
onBufWriteCmdInfoFile	vim/autoload/fuf.vim	/^function s:onBufWriteCmdInfoFile()$/;"	f
onBufWritePost	vim/plugin/fuf.vim	/^function s:onBufWritePost()$/;"	f
onCommandPre	vim/plugin/fuf.vim	/^function s:onCommandPre()$/;"	f
openBookmark	vim/plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	vim/plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	vim/plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openFufBuffer	vim/autoload/fuf.vim	/^function s:openFufBuffer()$/;"	f
openInNewTab	vim/plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	vim/plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
open_func_arg	vim/plugin/autoclose.vim	/^        let open_func_arg = '"' . key . '"'$/;"	v
open_func_arg	vim/plugin/autoclose.vim	/^        let open_func_arg = '"\\""'$/;"	v
open_selection	vim/ruby/command-t/controller.rb	/^    def open_selection selection, options = {}$/;"	f	class:CommandT.Controller
opfunc	vim/plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	vim/plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
opts	vim/autoload/rails.vim	/^function! s:opts()$/;"	f
os	vim/lib/extras/cocoa_classes.py	/^import os, re$/;"	i
os	vim/lib/extras/cocoa_definitions.py	/^import os, commands, re$/;"	i
os	vim/lib/extras/cocoa_methods.py	/^import re, os, gzip$/;"	i
output_file	vim/lib/extras/build_syntaxfile.py	/^def output_file(fname=None):$/;"	f
output_file	vim/lib/extras/cocoa_classes.py	/^def output_file(fname=None):$/;"	f
padding_for_selected_match	vim/ruby/command-t/match_window.rb	/^    def padding_for_selected_match str$/;"	f	class:CommandT.MatchWindow
parseChangesLine	vim/autoload/fuf/changelist.vim	/^function s:parseChangesLine(line)$/;"	f
parseHelpTagEntry	vim/autoload/fuf/help.vim	/^function s:parseHelpTagEntry(line, tagFile)$/;"	f
parseHelpTagFiles	vim/autoload/fuf/help.vim	/^function s:parseHelpTagFiles(tagFiles)$/;"	f
parseJumpsLine	vim/autoload/fuf/jumplist.vim	/^function s:parseJumpsLine(line, bufnrPrev)$/;"	f
parseJumpsLine	vim/autoload/fuf/quickfix.vim	/^function s:parseJumpsLine(line)$/;"	f
parseTagFiles	vim/autoload/fuf/tag.vim	/^function s:parseTagFiles(tagFiles)$/;"	f
parseTagFiles	vim/autoload/fuf/taggedfile.vim	/^function s:parseTagFiles(tagFiles)$/;"	f
paste	irbrc	/^def paste$/;"	f
path=	vim/ruby/command-t/finder.rb	/^    def path= path$/;"	f	class:CommandT.Finder
path=	vim/ruby/command-t/scanner.rb	/^    def path= str$/;"	f	class:CommandT.Scanner
path_excluded?	vim/ruby/command-t/scanner.rb	/^    def path_excluded? path$/;"	f	class:CommandT.Scanner
pathjoin	vim/autoload/rails.vim	/^function! s:pathjoin(...) abort$/;"	f
paths	vim/ruby/command-t/scanner.rb	/^    def paths$/;"	f	class:CommandT.Scanner
pathsplit	vim/autoload/rails.vim	/^function! s:pathsplit(path) abort$/;"	f
pattern	vim/syntax/cucumber.vim	/^function! s:pattern(key)$/;"	f
pdfdir	vim/ruby/command-t/Makefile	/^pdfdir = $(docdir)$/;"	m
pluginEdit	vim/autoload/rails.vim	/^function! s:pluginEdit(cmd,...)$/;"	f
pluginList	vim/autoload/rails.vim	/^function! s:pluginList(A,L,P)$/;"	f
pop_command	vim/autoload/rails.vim	/^function! s:pop_command()$/;"	f
prefix	vim/ruby/command-t/Makefile	/^prefix = $(DESTDIR)\/usr\/local$/;"	m
preload	vim/ruby/command-t/Makefile	/^preload = $/;"	m
prephelp	vim/autoload/rails.vim	/^function! s:prephelp()$/;"	f
previewNode	vim/plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
print_error	vim/ruby/command-t/match_window.rb	/^    def print_error msg$/;"	f	class:CommandT.MatchWindow
print_match	vim/ruby/command-t/match_window.rb	/^    def print_match idx$/;"	f	class:CommandT.MatchWindow
print_matches	vim/ruby/command-t/match_window.rb	/^    def print_matches$/;"	f	class:CommandT.MatchWindow
print_no_such_file_or_directory	vim/ruby/command-t/match_window.rb	/^    def print_no_such_file_or_directory$/;"	f	class:CommandT.MatchWindow
process	vim/plugin/surround.vim	/^function! s:process(string)$/;"	f
profile	irbrc	/^def profile$/;"	f
promptToDelBuffer	vim/plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
psdir	vim/ruby/command-t/Makefile	/^psdir = $(docdir)$/;"	m
push_chdir	vim/autoload/rails.vim	/^function! s:push_chdir(...)$/;"	f
putCursorInTreeWin	vim/plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	vim/plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
pwd	vim/ruby/vim.rb	/^  def self.pwd$/;"	F	class:VIM
r	irbrc	/^  def r(arg)$/;"	f	class:Kernel
r	irbrc	/^  def r(meth = nil)$/;"	f	class:Module
rails#STATUSLINE	vim/autoload/rails.vim	/^function! rails#STATUSLINE(...)$/;"	f
rails#app	vim/autoload/rails.vim	/^function! rails#app(...)$/;"	f
rails#buffer	vim/autoload/rails.vim	/^function! rails#buffer(...)$/;"	f
rails#cache_clear	vim/autoload/rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#camelize	vim/autoload/rails.vim	/^function! rails#camelize(str)$/;"	f
rails#log_syntax	vim/autoload/rails.vim	/^function! rails#log_syntax()$/;"	f
rails#new_app_command	vim/autoload/rails.vim	/^function! rails#new_app_command(bang,...)$/;"	f
rails#pluralize	vim/autoload/rails.vim	/^function! rails#pluralize(word)$/;"	f
rails#singularize	vim/autoload/rails.vim	/^function! rails#singularize(word)$/;"	f
rails#statusline	vim/autoload/rails.vim	/^function! rails#statusline(...)$/;"	f
rails#underscore	vim/autoload/rails.vim	/^function! rails#underscore(str)$/;"	f
railsPluginAbolish	vim/plugin/rails.vim	/^augroup railsPluginAbolish$/;"	a
railsPluginAuto	vim/autoload/rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginDetect	vim/plugin/rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginMenu	vim/plugin/rails.vim	/^augroup railsPluginMenu$/;"	a
rake_silent_tasks	rake_completion	/^def rake_silent_tasks$/;"	f
re	vim/lib/extras/cocoa_classes.py	/^import os, re$/;"	i
re	vim/lib/extras/cocoa_definitions.py	/^import os, commands, re$/;"	i
re	vim/lib/extras/cocoa_methods.py	/^import re, os, gzip$/;"	i
read_file	vim/lib/extras/build_syntaxfile.py	/^def read_file(fname):$/;"	f
readable_app	vim/autoload/rails.vim	/^function! s:readable_app() dict abort$/;"	f
readable_calculate_file_type	vim/autoload/rails.vim	/^function! s:readable_calculate_file_type() dict abort$/;"	f
readable_controller_name	vim/autoload/rails.vim	/^function! s:readable_controller_name(...) dict abort$/;"	f
readable_default_rake_task	vim/autoload/rails.vim	/^function! s:readable_default_rake_task(lnum) dict abort$/;"	f
readable_define_pattern	vim/autoload/rails.vim	/^function! s:readable_define_pattern() dict abort$/;"	f
readable_end_of	vim/autoload/rails.vim	/^function! s:readable_end_of(lnum) dict abort$/;"	f
readable_last_format	vim/autoload/rails.vim	/^function! s:readable_last_format(start) dict abort$/;"	f
readable_last_method	vim/autoload/rails.vim	/^function! s:readable_last_method(start) dict abort$/;"	f
readable_last_method_line	vim/autoload/rails.vim	/^function! s:readable_last_method_line(start) dict abort$/;"	f
readable_last_opening_line	vim/autoload/rails.vim	/^function! s:readable_last_opening_line(start,pattern,limit) dict abort$/;"	f
readable_line_count	vim/autoload/rails.vim	/^function! s:readable_line_count() dict abort$/;"	f
readable_model_name	vim/autoload/rails.vim	/^function! s:readable_model_name(...) dict abort$/;"	f
readable_preview_urls	vim/autoload/rails.vim	/^function! s:readable_preview_urls(lnum) dict abort$/;"	f
readable_related	vim/autoload/rails.vim	/^function! s:readable_related(...) dict abort$/;"	f
readable_type_name	vim/autoload/rails.vim	/^function! s:readable_type_name() dict abort$/;"	f
readfile	vim/autoload/rails.vim	/^function! s:readfile(path,...)$/;"	f
redraw	vim/plugin/surround.vim	/^function! s:redraw()$/;"	f
redraw	vim/ruby/command-t/prompt.rb	/^    def redraw$/;"	f	class:CommandT.Prompt
refreshCurrent	vim/plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	vim/plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
register_for_key_presses	vim/ruby/command-t/controller.rb	/^    def register_for_key_presses$/;"	f	class:CommandT.Controller
reindent	vim/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
relglob	vim/autoload/rails.vim	/^function! s:relglob(...)$/;"	f
removeItemFromCache	vim/autoload/fuf/mrufile.vim	/^function s:removeItemFromCache(word)$/;"	f
renameCurrent	vim/plugin/NERD_tree.vim	/^function! s:renameCurrent()$/;"	f
renderBookmarks	vim/plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	vim/plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	vim/plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
renewCachesOfAllModes	vim/plugin/fuf.vim	/^function s:renewCachesOfAllModes()$/;"	f
repeat	vim/plugin/surround.vim	/^function! s:repeat(str,count)$/;"	f
resetomnicomplete	vim/autoload/rails.vim	/^function! s:resetomnicomplete()$/;"	f
restore	vim/ruby/command-t/settings.rb	/^    def restore$/;"	f	class:CommandT.Settings
restoreScreenState	vim/plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
restoreTemporaryGlobalOptions	vim/autoload/fuf.vim	/^function s:restoreTemporaryGlobalOptions()$/;"	f
restore_window_dimensions	vim/ruby/command-t/match_window.rb	/^    def restore_window_dimensions$/;"	f	class:CommandT.MatchWindow
revealBookmark	vim/plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
ri	irbrc	/^  def ri(method = nil)$/;"	f	class:Object
ri	irbrc	/^def ri arg$/;"	f
rquote	vim/autoload/rails.vim	/^function! s:rquote(str)$/;"	f
ruby	vim/ruby/command-t/Makefile	/^ruby = \/usr\/local\/bin\/ruby$/;"	m
ruby_minlines	vim/syntax/ruby.vim	/^    let ruby_minlines = 50$/;"	v
ruby_version	vim/ruby/command-t/Makefile	/^ruby_version = 1.8$/;"	m
rubycomplete#Complete	vim/autoload/rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
rubycomplete#Init	vim/autoload/rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
rubylibdir	vim/ruby/command-t/Makefile	/^rubylibdir = $(libdir)\/ruby\/$(ruby_version)$/;"	m
s	vim/plugin/surround.vim	/^            vmap  s    <Plug>Vsurround$/;"	m
s:ABBR_SNIP_MASK	vim/autoload/fuf.vim	/^let s:ABBR_SNIP_MASK = '...'$/;"	v
s:Bookmark	vim/plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:Disable	vim/plugin/snippetsEmu.vim	/^let s:Disable = 0$/;"	v
s:ERROR	vim/autoload/vimball.vim	/^ let s:ERROR   = 2$/;"	v
s:INFO_FILE_VERSION_LINE	vim/autoload/fuf.vim	/^let s:INFO_FILE_VERSION_LINE = "VERSION\\t300"$/;"	v
s:MODE_NAME	vim/autoload/fuf/bookmark.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/buffer.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/callbackfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/callbackitem.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/changelist.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/dir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/file.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/givencmd.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/givendir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/givenfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/help.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/jumplist.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/line.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/mrucmd.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/mrufile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/quickfix.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/tag.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	vim/autoload/fuf/taggedfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:NERDTreeBufName	vim/plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	vim/plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	vim/plugin/NERD_tree.vim	/^let s:NERD_tree_version = '3.1.0'$/;"	v
s:OPEN_TYPE_CURRENT	vim/autoload/fuf.vim	/^let s:OPEN_TYPE_CURRENT = 1$/;"	v
s:OPEN_TYPE_DELETE	vim/autoload/fuf/bookmark.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_DELETE	vim/autoload/fuf/line.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_SPLIT	vim/autoload/fuf.vim	/^let s:OPEN_TYPE_SPLIT   = 2$/;"	v
s:OPEN_TYPE_TAB	vim/autoload/fuf.vim	/^let s:OPEN_TYPE_TAB     = 4$/;"	v
s:OPEN_TYPE_VSPLIT	vim/autoload/fuf.vim	/^let s:OPEN_TYPE_VSPLIT  = 3$/;"	v
s:Path	vim/plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:RLTVNMBR	vim/autoload/RltvNmbr.vim	/^let s:RLTVNMBR= 2683$/;"	v
s:RLTVNMBR	vim/plugin/RltvNmbr.vim	/^let s:RLTVNMBR= 2683$/;"	v
s:Tlist_Skip_Refresh	vim/plugin/taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TreeDirNode	vim/plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	vim/plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:USAGE	vim/autoload/vimball.vim	/^ let s:USAGE   = 0$/;"	v
s:WARNING	vim/autoload/vimball.vim	/^ let s:WARNING = 1$/;"	v
s:app_prototype	vim/autoload/rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	vim/autoload/rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:apps	vim/autoload/rails.vim	/^  let s:apps = {}$/;"	v
s:autoinstall	vim/autoload/getscript.vim	/^  let s:autoinstall= $HOME."\/".s:dotvim$/;"	v
s:autoinstall	vim/autoload/getscript.vim	/^let s:autoinstall= ""$/;"	v
s:block_regex	vim/indent/ruby.vim	/^let s:block_regex =$/;"	v
s:browsefilter	vim/ftplugin/eruby.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim/ftplugin/eruby.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	vim/ftplugin/eruby.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:bufNrFuf	vim/autoload/fuf.vim	/^let s:bufNrFuf = -1$/;"	v
s:bufTimes	vim/autoload/fuf/buffer.vim	/^let s:bufTimes = {}$/;"	v
s:bufferCursorPosMap	vim/autoload/fuf.vim	/^let s:bufferCursorPosMap = {}$/;"	v
s:buffer_prototype	vim/autoload/rails.vim	/^let s:buffer_prototype = {}$/;"	v
s:cache_prototype	vim/autoload/rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:charsToClose	vim/plugin/autoclose.vim	/^    let s:charsToClose = g:AutoClosePairs$/;"	v
s:charsToClose	vim/plugin/autoclose.vim	/^    let s:charsToClose = {'(': ')', '{': '}', '[': ']', '"': '"', "'": "'"}$/;"	v
s:cocoa_indexes	vim/autoload/objc/cocoacomplete.vim	/^let s:cocoa_indexes = s:lib_dir.'cocoa_indexes\/'$/;"	v
s:code	vim/ftplugin/ruby.vim	/^    let s:code = "print ($: + begin; require %q{rubygems}; Gem.all_load_paths.sort.uniq; rescue LoadError; []; end).join(%q{,})"$/;"	v
s:continuation_regex	vim/indent/ruby.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.,=:-]\\|\\W[|&?]\\|||\\|&&\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:continuation_regex2	vim/indent/ruby.vim	/^let s:continuation_regex2 =$/;"	v
s:cpo_save	vim/autoload/rails.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/compiler/eruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/compiler/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/compiler/rubyunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/ftplugin/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/indent/ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/plugin/endwise.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/plugin/surround.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim/plugin/taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:debug	vim/plugin/autoclose.vim	/^let s:debug = 1$/;"	v
s:debug	vim/plugin/snippetsEmu.vim	/^let s:debug = 1$/;"	v
s:did_cocoa	vim/plugin/cocoa.vim	/^let s:did_cocoa = 1$/;"	v
s:did_snip_helper	vim/ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	vim/after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:docset_cmd	vim/autoload/objc/man.vim	/^let s:docset_cmd = '\/Developer\/usr\/bin\/docsetutil search -skip-text -query '$/;"	v
s:docsets	vim/autoload/objc/man.vim	/^let s:docsets =  []$/;"	v
s:dotvim	vim/autoload/getscript.vim	/^  let s:dotvim= ".vim"$/;"	v
s:dotvim	vim/autoload/getscript.vim	/^  let s:dotvim= "vimfiles"$/;"	v
s:efm_backtrace	vim/autoload/rails.vim	/^let s:efm_backtrace='%D(in\\ %f),'$/;"	v
s:emapleader	vim/plugin/AlignMapsPlugin.vim	/^  let s:emapleader= escape(s:mapleader,'\\ ')$/;"	v
s:end_end_regex	vim/indent/ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end\\>'$/;"	v
s:end_middle_regex	vim/indent/ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue\\>\\|when\\|elsif\\)\\>'$/;"	v
s:end_skip_expr	vim/indent/ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:end_start_regex	vim/indent/ruby.vim	/^let s:end_start_regex = '^\\s*\\zs\\<\\%(module\\|class\\|def\\|if\\|for' .$/;"	v
s:escape_chars	vim/plugin/NERD_tree.vim	/^let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:file	vim/autoload/rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:file_prototype	vim/autoload/rails.vim	/^let s:file_prototype = {}$/;"	v
s:firstmenu	vim/plugin/AlignMapsPlugin.vim	/^ let s:firstmenu= 1$/;"	v
s:global_cpo	vim/plugin/autoclose.vim	/^let s:global_cpo = &cpo " store compatible-mode in local variable$/;"	v
s:handler	vim/autoload/fuf/bookmark.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/buffer.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/callbackfile.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/callbackitem.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/changelist.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/dir.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/file.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/givencmd.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/givendir.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/givenfile.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/help.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/jumplist.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/line.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/mrucmd.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/mrufile.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/quickfix.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/tag.vim	/^let s:handler = {}$/;"	v
s:handler	vim/autoload/fuf/taggedfile.vim	/^let s:handler = {}$/;"	v
s:handlerBase	vim/autoload/fuf.vim	/^let s:handlerBase = {}$/;"	v
s:keepcpo	vim/autoload/Align.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim/autoload/AlignMaps.vim	/^let s:keepcpo         = &cpo$/;"	v
s:keepcpo	vim/autoload/RltvNmbr.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim/autoload/getscript.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	vim/autoload/vimball.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	vim/plugin/AlignMapsPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:keepcpo	vim/plugin/AlignPlugin.vim	/^let s:keepcpo            = &cpo$/;"	v
s:keepcpo	vim/plugin/RltvNmbr.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim/plugin/RltvNmbrPlugin.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim/plugin/cecutil.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	vim/plugin/getscriptPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:keepcpo	vim/plugin/vimballPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:lib_dir	vim/autoload/objc/cocoacomplete.vim	/^let s:lib_dir = fnameescape(expand('<sfile>:p:h:h:h').'\/lib\/')$/;"	v
s:lines	vim/ftplugin/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	vim/syntax/eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:mapleader	vim/plugin/AlignMapsPlugin.vim	/^  let s:mapleader = exists("g:mapleader")? g:mapleader : '\\'$/;"	v
s:match_words	vim/ftplugin/eruby.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	vim/ftplugin/eruby.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	vim/ftplugin/eruby.vim	/^let s:match_words = ""$/;"	v
s:menu_char_prefix	vim/plugin/taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:modifier	vim/plugin/cecutil.vim	/^ let s:modifier= "sil "$/;"	v
s:modifier	vim/plugin/cecutil.vim	/^ let s:modifier= "sil keepj "$/;"	v
s:next_buffer_number	vim/plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:old_cpo	vim/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:originalGlobalOptions	vim/autoload/fuf.vim	/^let s:originalGlobalOptions = {}$/;"	v
s:os_slash	vim/plugin/NERD_tree.vim	/^    let s:os_slash = '\\'$/;"	v
s:os_slash	vim/plugin/NERD_tree.vim	/^let s:os_slash = '\/'$/;"	v
s:protectedRegions	vim/plugin/autoclose.vim	/^    let s:protectedRegions = ["Comment", "String", "Character"]$/;"	v
s:protectedRegions	vim/plugin/autoclose.vim	/^    let s:protectedRegions = g:AutoCloseProtectedRegions$/;"	v
s:readable_prototype	vim/autoload/rails.vim	/^let s:readable_prototype = {}$/;"	v
s:ruby_deindent_keywords	vim/indent/ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:ruby_indent_keywords	vim/indent/ruby.vim	/^let s:ruby_indent_keywords = '^\\s*\\zs\\<\\%(module\\|class\\|def\\|if\\|for' .$/;"	v
s:rubycomplete_debug	vim/autoload/rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
s:rubycomplete_rails_loaded	vim/autoload/rubycomplete.vim	/^let s:rubycomplete_rails_loaded = 0$/;"	v
s:rubypath	vim/ftplugin/ruby.vim	/^      let s:rubypath = system("ruby -e '" . s:code . "'")$/;"	v
s:rubypath	vim/ftplugin/ruby.vim	/^      let s:rubypath = system('ruby -e "' . s:code . '"')$/;"	v
s:rubypath	vim/ftplugin/ruby.vim	/^    let s:rubypath = ".,,"$/;"	v
s:rubypath	vim/ftplugin/ruby.vim	/^    let s:rubypath = '.,' . substitute(s:rubypath, '\\%(^\\|,\\)\\.\\%(,\\|$\\)', ',,', '')$/;"	v
s:running	vim/plugin/autoclose.vim	/^    let s:running = 1$/;"	v
s:running	vim/plugin/autoclose.vim	/^    let s:running = g:AutoCloseOn$/;"	v
s:running_windows	vim/plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	vim/ftplugin/eruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:sid	vim/autoload/rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:skip_expr	vim/indent/ruby.vim	/^let s:skip_expr =$/;"	v
s:snippets	vim/plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:syng_strcom	vim/indent/ruby.vim	/^let s:syng_strcom = '\\<ruby\\%(String\\|StringDelimiter\\|ASCIICode' .$/;"	v
s:syng_string	vim/indent/ruby.vim	/^let s:syng_string =$/;"	v
s:syng_stringdoc	vim/indent/ruby.vim	/^let s:syng_stringdoc =$/;"	v
s:tlist_app_name	vim/plugin/taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	vim/plugin/taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	vim/plugin/taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	vim/plugin/taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	vim/plugin/taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	vim/plugin/taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	vim/plugin/taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	vim/plugin/taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	vim/plugin/taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	vim/plugin/taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	vim/plugin/taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	vim/plugin/taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	vim/plugin/taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	vim/plugin/taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	vim/plugin/taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	vim/plugin/taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	vim/plugin/taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	vim/plugin/taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	vim/plugin/taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	vim/plugin/taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	vim/plugin/taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	vim/plugin/taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	vim/plugin/taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	vim/plugin/taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	vim/plugin/taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	vim/plugin/taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	vim/plugin/taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	vim/plugin/taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	vim/plugin/taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	vim/plugin/taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	vim/plugin/taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	vim/plugin/taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	vim/plugin/taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	vim/plugin/taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	vim/plugin/taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	vim/plugin/taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	vim/plugin/taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	vim/plugin/taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	vim/plugin/taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	vim/plugin/taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	vim/plugin/taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	vim/plugin/taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	vim/plugin/taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	vim/plugin/taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	vim/plugin/taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	vim/plugin/taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	vim/plugin/taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	vim/plugin/taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	vim/plugin/taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	vim/plugin/taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	vim/plugin/taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	vim/plugin/taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	vim/plugin/taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tree_markup_reg	vim/plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	vim/plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	vim/plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:undo_ftplugin	vim/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	vim/ftplugin/eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim/ftplugin/eruby.vim	/^let s:undo_ftplugin = ""$/;"	v
s:view_types	vim/autoload/rails.vim	/^let s:view_types = 'rhtml,erb,rxml,builder,rjs,mab,liquid,haml,dryml,mn'$/;"	v
sanitize_path_string	vim/ruby/command-t/controller.rb	/^    def sanitize_path_string str$/;"	f	class:CommandT.Controller
save	vim/ruby/command-t/settings.rb	/^    def save$/;"	f	class:CommandT.Settings
saveScreenState	vim/plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
sbindir	vim/ruby/command-t/Makefile	/^sbindir = $(exec_prefix)\/sbin$/;"	m
scanlineforuris	vim/autoload/rails.vim	/^function! s:scanlineforuris(line)$/;"	f
scoreBoundaryMatching	vim/autoload/fuf.vim	/^function s:scoreBoundaryMatching(wordForBoundary, pattern, exprBoundary)$/;"	f
scoreSequentialMatching	vim/autoload/fuf.vim	/^function s:scoreSequentialMatching(word, pattern)$/;"	f
scrub	vim/autoload/rails.vim	/^function! s:scrub(collection,item)$/;"	f
searchsyn	vim/ftplugin/ruby.vim	/^function! s:searchsyn(pattern,syn,flags)$/;"	f
select	vim/ruby/vim/window.rb	/^    def select$/;"	f	class:VIM.Window
select_next	vim/ruby/command-t/controller.rb	/^    def select_next$/;"	f	class:CommandT.Controller
select_next	vim/ruby/command-t/match_window.rb	/^    def select_next$/;"	f	class:CommandT.MatchWindow
select_prev	vim/ruby/command-t/controller.rb	/^    def select_prev$/;"	f	class:CommandT.Controller
select_prev	vim/ruby/command-t/match_window.rb	/^    def select_prev$/;"	f	class:CommandT.MatchWindow
selected?	vim/ruby/vim/window.rb	/^    def selected?$/;"	f	class:VIM.Window.select
selection	vim/ruby/command-t/match_window.rb	/^    def selection$/;"	f	class:CommandT.MatchWindow
selectiveexpand	vim/autoload/rails.vim	/^function! s:selectiveexpand(pat,good,default,...)$/;"	f
serializeInfoMap	vim/autoload/fuf.vim	/^function s:serializeInfoMap(infoMap)$/;"	f
setAbbrWithFileAbbrData	vim/autoload/fuf.vim	/^function s:setAbbrWithFileAbbrData(item, snippedHeads)$/;"	f
setLocalOptionsForFufBuffer	vim/autoload/fuf.vim	/^function s:setLocalOptionsForFufBuffer()$/;"	f
setRanks	vim/autoload/fuf.vim	/^function s:setRanks(item, pattern, exprBoundary, stats)$/;"	f
setTemporaryGlobalOption	vim/autoload/fuf.vim	/^function s:setTemporaryGlobalOption(name, value)$/;"	f
set_bool	vim/ruby/command-t/settings.rb	/^    def set_bool setting, value$/;"	f	class:CommandT.Settings
set_number	vim/ruby/command-t/settings.rb	/^    def set_number setting, value$/;"	f	class:CommandT.Settings
set_status	vim/ruby/command-t/prompt.rb	/^    def set_status *args$/;"	f	class:CommandT.Prompt
set_up_finder	vim/ruby/command-t/controller.rb	/^    def set_up_finder$/;"	f	class:CommandT.Controller
set_up_max_height	vim/ruby/command-t/controller.rb	/^    def set_up_max_height$/;"	f	class:CommandT.Controller
setopt	vim/autoload/rails.vim	/^function! s:setopt(opt,val)$/;"	f
setupStatusline	vim/plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	vim/plugin/NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
sharedstatedir	vim/ruby/command-t/Makefile	/^sharedstatedir = $(prefix)\/com$/;"	m
show	vim/ruby/command-t/controller.rb	/^    def show$/;"	f	class:CommandT.Controller
show	vim/ruby/command-t/stub.rb	/^    def show$/;"	f	class:CommandT.Stub
showFileSystemMenu	vim/plugin/NERD_tree.vim	/^function! s:showFileSystemMenu()$/;"	f
show_cursor	vim/ruby/command-t/match_window.rb	/^    def show_cursor$/;"	f	class:CommandT.MatchWindow
show_log	railsrc	/^def show_log$/;"	f
sitearch	vim/ruby/command-t/Makefile	/^sitearch = i686-darwin10.0.0$/;"	m
sitearchdir	vim/ruby/command-t/Makefile	/^sitearchdir = $(sitelibdir)\/$(sitearch)$/;"	m
sitedir	vim/ruby/command-t/Makefile	/^sitedir = $(libdir)\/ruby\/site_ruby$/;"	m
sitelibdir	vim/ruby/command-t/Makefile	/^sitelibdir = $(sitedir)\/$(ruby_version)$/;"	m
sname	vim/autoload/rails.vim	/^function! s:sname()$/;"	f
snip	vim/plugin/snippetsEmu.vim	/^  let snip = substitute(def_file, '.*[\\\\\/]\\(.*\\)_snippets.vim', '\\1', '')$/;"	v
snipHead	vim/autoload/fuf.vim	/^function s:snipHead(str, len, mask)$/;"	f
snipMate#expandSnip	vim/autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	vim/autoload/snipMate.vim	/^fun snipMate#jumpTabStop()$/;"	f
snipMid	vim/autoload/fuf.vim	/^function s:snipMid(str, len, mask)$/;"	f
snipTail	vim/autoload/fuf.vim	/^function s:snipTail(str, len, mask)$/;"	f
snippets_dir	vim/plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
sorted_matches_for	vim/ruby/command-t/finder.rb	/^    def sorted_matches_for str, options = {}$/;"	f	class:CommandT.Finder
specEdit	vim/autoload/rails.vim	/^function! s:specEdit(cmd,...)$/;"	f
specList	vim/autoload/rails.vim	/^function! s:specList(A,L,P)$/;"	f
sql	irbrc	/^  def sql(query_string)$/;"	f
srcdir	vim/ruby/command-t/Makefile	/^srcdir = .$/;"	m
st	vim/after/ftplugin/actionscript_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/aspvbs_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/c_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/css_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/django_model_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/django_template_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/f-script_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/haskell_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/html_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/java_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/javascript_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/latex_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/logo_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/lua_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/markdown_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/movable_type_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/objc_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/ocaml_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/perl_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/php_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/phpdoc_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/propel_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/python_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/rails_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/ruby_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/sh_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/slate_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/smarty_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/symfony_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/tcl_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/template_toolkit_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/tex_snippets.vim	/^let st = g:snip_start_tag$/;"	v
st	vim/after/ftplugin/xhtml_snippets.vim	/^let st = g:snip_start_tag$/;"	v
startswith	vim/autoload/rails.vim	/^function! s:startswith(string,prefix)$/;"	f
stripMarkupFromLine	vim/plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
stylesheetEdit	vim/autoload/rails.vim	/^function! s:stylesheetEdit(cmd,...)$/;"	f
stylesheetList	vim/autoload/rails.vim	/^function! s:stylesheetList(A,L,P)$/;"	f
sub	vim/autoload/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sub	vim/plugin/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
synname	vim/ftplugin/ruby.vim	/^function! s:synname()$/;"	f
synname	vim/plugin/endwise.vim	/^function! s:synname()$/;"	f
sys	vim/lib/extras/build_syntaxfile.py	/^import sys, datetime$/;"	i
sysconfdir	vim/ruby/command-t/Makefile	/^sysconfdir = $(prefix)\/etc$/;"	m
tabpagevar	vim/plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
target_prefix	vim/ruby/command-t/Makefile	/^target_prefix = $/;"	m
taskEdit	vim/autoload/rails.vim	/^function! s:taskEdit(cmd,...)$/;"	f
taskList	vim/autoload/rails.vim	/^function! s:taskList(A,L,P)$/;"	f
tasks_from_cache	capistrano_completion	/^  def tasks_from_cache$/;"	f	class:CapistranoCompletion
toLowerForIgnoringCase	vim/autoload/fuf.vim	/^function s:toLowerForIgnoringCase(str)$/;"	f
toggle	vim/plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	vim/plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	vim/plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	vim/plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	vim/plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggle_focus	vim/ruby/command-t/controller.rb	/^    def toggle_focus$/;"	f	class:CommandT.Controller
topdir	vim/ruby/command-t/Makefile	/^topdir = \/usr\/local\/lib\/ruby\/1.8\/i686-darwin10.0.0$/;"	m
treeExistsForBuf	vim/plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	vim/plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
truncated_match	vim/ruby/command-t/match_window.rb	/^    def truncated_match str$/;"	f	class:CommandT.MatchWindow
try	vim/autoload/rails.vim	/^function! s:try(cmd) abort$/;"	f
typed	capistrano_completion	/^  def typed$/;"	f	class:CapistranoCompletion
typed_before_colon	capistrano_completion	/^  def typed_before_colon$/;"	f	class:CapistranoCompletion
unfocus	vim/ruby/command-t/match_window.rb	/^    def unfocus$/;"	f	class:CommandT.MatchWindow
unfocus	vim/ruby/command-t/prompt.rb	/^    def unfocus$/;"	f	class:CommandT.Prompt
unique	vim/plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
unittestEdit	vim/autoload/rails.vim	/^function! s:unittestEdit(cmd,...)$/;"	f
unittestList	vim/autoload/rails.vim	/^function! s:unittestList(A,L,P)$/;"	f
unlock	vim/ruby/command-t/match_window.rb	/^    def unlock$/;"	f	class:CommandT.MatchWindow
upDir	vim/plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
updateBufTimes	vim/autoload/fuf/buffer.vim	/^function s:updateBufTimes()$/;"	f
updateInfo	vim/autoload/fuf/mrucmd.vim	/^function s:updateInfo(cmd)$/;"	f
updateInfo	vim/autoload/fuf/mrufile.vim	/^function s:updateInfo()$/;"	f
usage	vim/lib/extras/build_syntaxfile.py	/^def usage():$/;"	f
vendorarchdir	vim/ruby/command-t/Makefile	/^vendorarchdir = $(vendorlibdir)\/$(sitearch)$/;"	m
vendordir	vim/ruby/command-t/Makefile	/^vendordir = $(libdir)\/ruby\/vendor_ruby$/;"	m
vendorlibdir	vim/ruby/command-t/Makefile	/^vendorlibdir = $(vendordir)\/$(ruby_version)$/;"	m
viewEdit	vim/autoload/rails.vim	/^function! s:viewEdit(cmd,...)$/;"	f
viewList	vim/autoload/rails.vim	/^function! s:viewList(A,L,P)$/;"	f
viewspattern	vim/autoload/rails.vim	/^function! s:viewspattern()$/;"	f
vimball#Decompress	vim/autoload/vimball.vim	/^fun! vimball#Decompress(fname)$/;"	f
vimball#MkVimball	vim/autoload/vimball.vim	/^fun! vimball#MkVimball(line1,line2,writelevel,...) range$/;"	f
vimball#RestoreSettings	vim/autoload/vimball.vim	/^fun! vimball#RestoreSettings()$/;"	f
vimball#RmVimball	vim/autoload/vimball.vim	/^fun! vimball#RmVimball(...)$/;"	f
vimball#SaveSettings	vim/autoload/vimball.vim	/^fun! vimball#SaveSettings()$/;"	f
vimball#ShowMesg	vim/autoload/vimball.vim	/^fun! vimball#ShowMesg(level,msg)$/;"	f
vimball#Vimball	vim/autoload/vimball.vim	/^fun! vimball#Vimball(really,...)$/;"	f
vt100?	vim/ruby/command-t/controller.rb	/^    def vt100?$/;"	f	class:CommandT.Controller
warn	vim/autoload/rails.vim	/^function! s:warn(str)$/;"	f
warn	vim/ruby/command-t/stub.rb	/^    def warn *msg$/;"	f	class:CommandT.Stub
warnOldInfoFile	vim/autoload/fuf.vim	/^function s:warnOldInfoFile()$/;"	f
wrap	vim/plugin/surround.vim	/^function! s:wrap(string,char,type,...)$/;"	f
wrapreg	vim/plugin/surround.vim	/^function! s:wrapreg(reg,char,...)$/;"	f
write_file	vim/lib/extras/cocoa_classes.py	/^from cocoa_definitions import write_file, find$/;"	i
write_file	vim/lib/extras/cocoa_definitions.py	/^def write_file(filename, lines):$/;"	f
xterm?	vim/ruby/command-t/controller.rb	/^    def xterm?$/;"	f	class:CommandT.Controller
yS	vim/plugin/surround.vim	/^    nmap          yS   <Plug>YSurround$/;"	m
ySS	vim/plugin/surround.vim	/^    nmap          ySS  <Plug>YSsurround$/;"	m
ySs	vim/plugin/surround.vim	/^    nmap          ySs  <Plug>YSsurround$/;"	m
ys	vim/plugin/surround.vim	/^    nmap          ys   <Plug>Ysurround$/;"	m
yss	vim/plugin/surround.vim	/^    nmap          yss  <Plug>Yssurround$/;"	m
